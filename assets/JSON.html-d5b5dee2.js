import{_ as s,o as a,c as t,e as p}from"./app-70f1c539.js";const e={};function o(i,n){return a(),t("div",null,[...n[0]||(n[0]=[p(`<h1 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h1><p>JSON 是 JavaScript 的严格子集，利用 JavaScript 中的几种模式来表示结构化数据。虽然它是基于 JavaScript 语法，但它独立于 JavaScript。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>JSON 支持 3 中类型的值</p><ul><li><p>简单值：字符串、数值、布尔值和 null</p></li><li><p>对象：对象表示有序键/值对。每个值可以是简单值，也可以是复杂类型</p></li><li><p>数组：数组表示可以通过数值索引访问的值的有序列表。数组的值可以 是任意类型，包括简单值、对象，甚至其他数组。</p></li></ul><h3 id="简单值" tabindex="-1"><a class="header-anchor" href="#简单值" aria-hidden="true">#</a> 简单值</h3><p>任何一个简单的值都是 JSON 的有效值，和 js 不同的是，JSON 中的字符串必须使用双引号包裹。</p><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>由于 JSON 中没有变量，所以在 JSON 中表示一个对象直接使用<code>{}</code>即可，但是对象中的 key 值也必须使用双引号将其包裹起来，最后一个键值对的后面也不需要<code>,</code>结尾。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
  <span class="token property">&quot;school&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;小学&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;location&quot;</span><span class="token operator">:</span> <span class="token string">&quot;这里&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>数组在 JSON 中使用 JavaScript 的数组字面量形式表示<code>[]</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span> <span class="token string">&quot;12345678901&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json解析与序列化" tabindex="-1"><a class="header-anchor" href="#json解析与序列化" aria-hidden="true">#</a> JSON解析与序列化</h2><h3 id="json对象" tabindex="-1"><a class="header-anchor" href="#json对象" aria-hidden="true">#</a> JSON对象</h3><p>在JSON对象中有两个方法 stringify() 和 parse()，这两个方法分别可以将 JavaScript 序列化为 JSON 字符串，以及将 JSON 解析为原生 JavaScript 值。</p><p>strinify()将将对象转换为一个序列化后的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;我是书名&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是一个字符串  {&quot;title&quot;:&quot;我是书名&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>parse()将被stringify()序列化后的字符串转为对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 是一个对象 {title:&quot;我是书名&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="序列化选项" tabindex="-1"><a class="header-anchor" href="#序列化选项" aria-hidden="true">#</a> 序列化选项</h3><ol><li><p>JSON.stringify() 可以接收三个参数，第一个是要序列化的对象，第二个参数可以是一个数组或者对象，第三个是序列化后缩进的字符数（最大缩进值为 10，大于 10 的值会自动设置为 10）</p><p>第二个参数是数组，会将被序列化的对象的key与数组的值进行比较，只有相等的值才会被保存下来</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 两个参数</span>
<span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;二级title&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;二级名字&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;一级title&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;一级名字&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jsy <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 只有最外层匹配的key被保存下来了</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;title&quot;:&quot;一级title&quot;,&quot;name&quot;:&quot;一级名字&quot;}</span>

<span class="token comment">// 3个参数</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
结果：依旧是一个字符串，只不过被格式化了
<span class="token punctuation">{</span>
    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;一级title&quot;</span><span class="token punctuation">,</span>
	<span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;一级名字&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JSON.parse()方法也可以接收一个额外的参数，这个函数会针对每个键/值对都调用一次。为区别 于传给 JSON.stringify()的起过滤作用的替代函数（replacer），这个函数被称为还原函数（reviver）。</p></li></ol>`,22)])])}const l=s(e,[["render",o],["__file","JSON.html.vue"]]);export{l as default};
