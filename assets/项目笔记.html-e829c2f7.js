import{_ as s,o as a,c as p,e as t}from"./app-70f1c539.js";const e={};function o(c,n){return a(),p("div",null,[...n[0]||(n[0]=[t(`<h3 id="req的参数" tabindex="-1"><a class="header-anchor" href="#req的参数" aria-hidden="true">#</a> req的参数</h3><ol><li><p><strong>query</strong> 获取路径上的查询参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">80</span><span class="token operator">/</span>user<span class="token operator">?</span>name<span class="token operator">=</span>zs<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">15</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token comment">// 结果为 { &quot;name&quot;: &quot;zs&quot;,&quot;age&quot;: &quot;15&quot;}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

query默认是一个空对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>params</strong> 获取动态参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">80</span><span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span>zs

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>  <span class="token comment">// 结果为{&quot;id&quot;: &quot;5&quot;,&quot;name&quot;: &quot;zs&quot;}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token operator">:</span>id和<span class="token operator">:</span>name是动态参数，会和请求的路径参数组成一个对象，默认值也是一个空对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="express的方法" tabindex="-1"><a class="header-anchor" href="#express的方法" aria-hidden="true">#</a> express的方法</h3><ol><li><p><strong>static</strong> 静态资源</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>调用express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的方法<span class="token punctuation">,</span>传入需要指定的静态资源目录，这个目录下面的所有静态资源都能够被直接访问到

	<span class="token comment">// public下面的所有静态资源都能被直接访问</span>
	app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
	app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 可以同时指定多个</span>

<span class="token literal-property property">例</span><span class="token operator">:</span> 直接访问<span class="token keyword">public</span>下面的img<span class="token punctuation">.</span>png图片，不需要指定是哪个文件夹，会自动去指定的静态文件夹下面找，谁先指定就先去那个文件夹下面找，找不到才会去后指定的那个文件下找
	<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">127.0.0.1:80</span><span class="token regex-delimiter">/</span><span class="token regex-flags">img</span></span><span class="token punctuation">.</span>png  

<span class="token number">2.</span>也可以指定前缀目录
	app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/public&#39;</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token literal-property property">访问方式：http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">80</span><span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>img<span class="token punctuation">.</span>png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h3><ol><li><p>路由模块化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>创建一个js文件<span class="token punctuation">,</span>写入以下代码
    <span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router

<span class="token number">2.</span>在主路由中引入并挂载
	<span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./user&#39;</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>userRouter<span class="token punctuation">)</span>
	或者
    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>userRouter<span class="token punctuation">)</span> <span class="token comment">// 加入统一的路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h3><ol><li><p>全局中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>用app<span class="token punctuation">.</span>user挂载全局中间件，每一个路由都会经过全局中间件
	app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我生效了&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 只要有路由被匹配，就会触发这个打印</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>中间件的作用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>多个中间件之间是共享同一份req和res的，可以上先执行的中间上统一的给req或res加上属性或者方法，后面的中间件或者路由就能拿到对应的值
    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>  <span class="token comment">// 中间件中给res加上了一个name属性</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

	router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 直接就能读取到上面挂载的name属性</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>局部中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>只有在<span class="token string">&#39;/user&#39;</span>使用，并没有被use挂载，所有他是一个只为user服务的中间件
	<span class="token keyword">const</span> <span class="token function-variable function">userMid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我生效了&#39;</span><span class="token punctuation">)</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>userMid<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">// 注册了userMid中间件</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>错误处理中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 抛出错误，认为制造</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;失败信息&#39;</span> <span class="token punctuation">,</span>err<span class="token punctuation">)</span> 	<span class="token comment">// 捕获失败信息，防止程序崩溃</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;失败了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

注意：
	<span class="token number">1.</span>捕获错误中间件比正常中间件多了一个err的参数
    <span class="token number">2.</span>错误中间件必须放置于最后
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="cors-解决跨域" tabindex="-1"><a class="header-anchor" href="#cors-解决跨域" aria-hidden="true">#</a> cors 解决跨域</h3><ol><li><p>cors 的使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i cors  <span class="token comment">// 下载插件</span>

<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 导入中间件</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 挂载中间件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>cors 的原理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cors全程 跨域资源共享 是由一些列的http响应头组成的，这些http响应头决定了浏览器是否阻止前端技术js代码跨域获取资源

Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token operator">*</span>   <span class="token comment">// *代表所有的地址都能被访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>指定域名不跨域</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://lindalang.com&#39;</span><span class="token punctuation">)</span>
指定只有 <span class="token string">&#39;http://lindalang.com&#39;</span>  访问服务器不跨域
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>CORS 仅支持客户端向服务器发送如下的 9 个请求头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Accept、Accept<span class="token operator">-</span>Language、Content<span class="token operator">-</span>Language、<span class="token constant">DPR</span>、Downlink、Save<span class="token operator">-</span>Data、Viewport<span class="token operator">-</span>Width、Width 、Content<span class="token operator">-</span>Type （值仅限于 text<span class="token operator">/</span>plain、multipart<span class="token operator">/</span>form<span class="token operator">-</span>data、application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded 三者之一）
如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Headers 对额外的请求头进行声明，否则这次请求会失败！

res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Content-Type, X-Custom-Header&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>如果客户端希望通过 <span class="token constant">PUT</span>、<span class="token constant">DELETE</span> 等方式请求服务器的资源，则需要在服务器端，通过 Access<span class="token operator">-</span>Control<span class="token operator">-</span>Alow<span class="token operator">-</span>Methods 来指明实际请求所允许使用的 <span class="token constant">HTTP</span> 方法

res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST, GET, DELETE, HEAD&#39;</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span><span class="token function">setHEader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token comment">//支持所有请求方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,10)])])}const i=s(e,[["render",o],["__file","项目笔记.html.vue"]]);export{i as default};
