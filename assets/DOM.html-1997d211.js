import{_ as s,o as a,c as t,e}from"./app-70f1c539.js";const p={};function o(c,n){return a(),t("div",null,[...n[0]||(n[0]=[e(`<h1 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> Dom</h1><h3 id="node-类型" tabindex="-1"><a class="header-anchor" href="#node-类型" aria-hidden="true">#</a> Node 类型</h3><p><strong>注意</strong>：以下所有的节点信息都来自于这里</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ulNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newNode<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>nodeName</strong></p><p>始终返回标签的大写名称</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nodeName<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BUTTON</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>节点关系</p><ul><li><p>获取一组节点中指定的节点，获取到的节点是一个类数组，但也有 length 的属性， 也可以通过下标的方式获取指定的节点，还可以用过<code>item</code>的方式获取节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>获取第二个节点
	nodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>		等同于		nodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>parentNode</strong></p><p>每个节点都有自己的<code>parentNode</code>，得到的是该节点的父节点信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>nodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span> <span class="token comment">// 节点ul</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>previousSibling 和 nextSibling</strong></p><p>第一个节点的 previousSibling 属性是 null，最后一个节点的 nextSibling 属性也是 null</p><p>如果只有一个节点则两个属性都是 null</p></li><li><p><strong>firstChild、lastChild、firstElementChild、lastElementChild</strong></p><p>firstChild、lastChild 通过父节点获取子节点的信息，但是空白等也算节点信息， 所以通过这两个拿到的子节点信息不是预期的节点信息，要更换为 firstElementChild、 lastElementChild 得到的才是预期的节点信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ulNode<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span> <span class="token comment">// #text</span>
ulNode<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span> <span class="token comment">// 正确的li节点信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>hasChildNodes</strong></p><p>当前节点是否有子节点，有就返回 true ，没有返回 false，但是空白也算他的子节点， 所以不怎么准确</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ulNode<span class="token punctuation">.</span><span class="token function">hasChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>操作节点</p><p>**注意：**下面所有的方法都是通过父节点来操作子节点</p><ul><li><p><strong>appendChild</strong></p><p>往当前这个节点中插入子节点，并且插入到末尾中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ulNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时 ulNode 中的末尾就新增了这个 newNode 的节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>insertBefore</strong></p><p>插入指定节点的前面，接收两个参数，第一个为父节点，第二个为参照节点，要插入的节 点会拆入槽参照节点的前面，如果第二个参数为<code>null</code>，怎表现和<code>appendChild</code>一致</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ulNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> ulNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入到第三个节点的前面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>replaceChild</strong></p><p>替换节点，接收两个参数，第一个为替换的节点，第二个为被替换的节点，被替换的节点 则会从 dom 树上删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ulNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> ulNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将第三个节点替换为 newNode</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>removeChild</strong></p><p>移除节点，将节点从 dom 树上移除，返回值就是被移除的 dom 节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ulNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>ulNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>其他方法</p><ul><li><p><strong>cloneNode</strong></p><p>所有节点身上的方法，复制一个节点，接收一个 Boolean 的参数，true 表示深拷贝， false 表示浅拷贝，浅拷贝无法将节点添加到页面上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ulNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>normalize</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="document" tabindex="-1"><a class="header-anchor" href="#document" aria-hidden="true">#</a> document</h3><p>表示文档节点，也就是整个 html 最外层的节点</p><ol><li><p>文档子节点</p><ul><li><p>获取<code>html</code>的节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span> <span class="token comment">// html 的节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取<code>body</code>节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">;</span> <span class="token comment">// body 的节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>文档信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 读取文档标题</span>
<span class="token keyword">let</span> originalTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span>
<span class="token comment">// 修改文档标题</span>
document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;New page title&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 取得完整的 URL</span>
<span class="token keyword">let</span> url <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">;</span>
<span class="token comment">// 取得域名</span>
<span class="token keyword">let</span> domain <span class="token operator">=</span> document<span class="token punctuation">.</span>domain<span class="token punctuation">;</span>
<span class="token comment">// 取得来源</span>
<span class="token keyword">let</span> referrer <span class="token operator">=</span> document<span class="token punctuation">.</span>referrer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>获取元素（定位元素）</strong></p><ul><li><p><strong>getElementById</strong></p><p>根据标签上的<code>id</code>属性去获取节点，区分大小写，如果有重名的<code>id</code>只会获取匹配的 第一个节点，找不到则返回 null</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">&quot;ulDom&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ulDom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取id为 ulDom 的节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>getElementsByTagName</strong></p><p>获取所有标签名匹配的节点集合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> liNodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>liNodes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有的 li 节点信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>namedItem</strong></p><p>从已有的节点集合中匹配标签中的<code>name</code>属性相同的节点（有问题不使用）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> liNodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>getElementsByName</strong></p><p>通过匹配标签上的<code>name</code>属性去获取所有节点的集合，有些标签不支持<code>name</code>属性， 比如 li 标签，所以不推荐使用。最常使用的方式是获取 radio 标签</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div name<span class="token operator">=</span><span class="token string">&quot;my&quot;</span><span class="token operator">&gt;</span><span class="token number">6666</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div name<span class="token operator">=</span><span class="token string">&quot;my&quot;</span><span class="token operator">&gt;</span><span class="token number">7777</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token keyword">const</span> nameNodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&#39;my&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特殊集合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>anchors 包含文档中所有带 name 属性的<span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>元素。

document<span class="token punctuation">.</span>applets 包含文档中所有<span class="token operator">&lt;</span>applet<span class="token operator">&gt;</span>元素（因为<span class="token operator">&lt;</span>applet<span class="token operator">&gt;</span>元素已经不建议使用，所以这个集合已经废弃

document<span class="token punctuation">.</span>forms 包含文档中所有<span class="token operator">&lt;</span>form<span class="token operator">&gt;</span>元素（与 document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span> <span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span>
返回的结果相同

document<span class="token punctuation">.</span>images 包含文档中所有<span class="token operator">&lt;</span>img<span class="token operator">&gt;</span>元素（与 document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span> <span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span>
返回的结果相同

document<span class="token punctuation">.</span>links 包含文档中所有带 href 属性的<span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="element-类型" tabindex="-1"><a class="header-anchor" href="#element-类型" aria-hidden="true">#</a> Element 类型</h3><ol><li><p><strong>tagName 和 nodName</strong></p><p>获取一个节点的标签名，并且返回的都是大写的形式，因为在不同浏览器可能行为不同， 所以最好转换为小写去判断。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ulDom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>HTML</strong>元素</p><p>读取标签上的属性，如果对其进行赋值，那么就是对标签上对应的属性赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;myDiv&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;bd ac&quot;</span> title<span class="token operator">=</span><span class="token string">&quot;Body text&quot;</span> lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span> dir<span class="token operator">=</span><span class="token string">&quot;ltr&quot;</span><span class="token operator">&gt;</span>
  <span class="token number">66666666</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span>className<span class="token punctuation">;</span> <span class="token comment">// bd ac  因为class是设置类名，被占用，所以使用className</span>
div<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// myDiv</span>
div<span class="token punctuation">.</span>title<span class="token punctuation">;</span> <span class="token comment">// Body text</span>
div<span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment">// en</span>
div<span class="token punctuation">.</span>dir<span class="token punctuation">;</span> <span class="token comment">// ltr 文字的方向</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>getAttribute</strong></p><p>获取标签身上的任意属性的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;myDiv&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;bd ac&quot;</span> doo<span class="token operator">=</span><span class="token string">&quot;doo&quot;</span><span class="token operator">&gt;</span>
  <span class="token number">66666666</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bd ac</span>
div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;doo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>setAttribute</strong></p><p>设置标签任意属性，淡入如果标签上已有这个属性，那么他的属性值将会被覆盖</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;myDiv&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;bd ac&quot;</span> doo<span class="token operator">=</span><span class="token string">&quot;doo&quot;</span><span class="token operator">&gt;</span>
  <span class="token number">66666666</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时标签上的 class 就只有 mian 这一个属性了</span>
div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>removeAttribute</strong></p><p>移除标签上的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;doo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>attributes</strong>（不常用）</p><p>读取标签身上的所有属性的集合，如果对其进行赋值，那么就是对标签上对应属性进行赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;myDiv&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;bd ac&quot;</span> doo<span class="token operator">=</span><span class="token string">&quot;doo&quot;</span><span class="token operator">&gt;</span>
  <span class="token number">66666666</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>getNamedItem</code>读取集合中指定的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">getNamedItem</span><span class="token punctuation">(</span><span class="token string">&#39;doo&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// doo=doo</span>
等同于  div<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">&#39;doo&#39;</span><span class="token punctuation">]</span> 	等同于 div<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span>

div<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">getNamedItem</span><span class="token punctuation">(</span><span class="token string">&#39;doo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nodeValue <span class="token comment">// doo 才是读取到属性的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>removeNamedItem</code>删除属性，并且返回被删除的属性值</p></li><li><p><code>setNamedItem</code>设置属性值</p></li></ul></li><li><p><strong>createElement</strong></p><p>创建元素，传入的参数就是要创建标签的标签名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;我是span标签&quot;</span><span class="token punctuation">;</span>
span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>children 和 childNodes</strong></p><p>chilren 只会获取到标签下面所有的元素集合，并不会获取到其空白产生的节点（#text）</p><p>childNodes 会获取到所有的元素集合，包括因空白产生的（#text）文本节点</p></li></ol><h3 id="dom-编程" tabindex="-1"><a class="header-anchor" href="#dom-编程" aria-hidden="true">#</a> DOM 编程</h3><ol><li><p><strong>MutationObserver</strong>接口</p><p>监听整个文档，dom 数的一部分，或者某个元素，元素的属性，子节点，文本或者前三者组合的变化。</p><ul><li><p>基本用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收一个回调函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>observe</code>方法</p><p>接收两个参数，第一个是要监听的节点，第二个是配置对象，配置要监听这个节点的什么变化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ulDom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>watchDom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建实例,并传入回调函数</span>
mb<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用observe 方法并传入节点和配置对象</span>

<span class="token keyword">function</span> <span class="token function">watchDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 回调函数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上面监听的节点属性的变化，这里修改了节点上的属性，回调函数就会被触发</span>
element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;doo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>配置对象说明</p><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>childList</td><td>如果设为 <code>true</code>，则观察目标节点（以及其子节点，如果 <code>subtree</code> 为 <code>true</code>）的子节点的添加或删除</td></tr><tr><td>attributes</td><td>如果设为 <code>true</code>，则观察目标节点的属性变动</td></tr><tr><td>characterData</td><td>如果设为 <code>true</code>，则观察目标节点的数据变动</td></tr><tr><td>subtree</td><td>如果设为 <code>true</code>，则观察目标节点的所有后代节点，而不仅仅是直接子节点。</td></tr><tr><td>attributeOldValue</td><td>如果设为 <code>true</code>，且 <code>attributes</code> 属性也设为 <code>true</code>，则 <code>MutationRecord</code> 的 <code>oldValue</code> 属性将记录变动前的属性值。</td></tr><tr><td>characterDataOldValue</td><td>如果设为 <code>true</code>，且 <code>characterData</code> 属性也设为 <code>true</code>，则 <code>MutationRecord</code> 的 <code>oldValue</code> 属性将记录变动前的数据。</td></tr><tr><td>attributeFilter</td><td>如果提供了一个数组，且 <code>attributes</code> 属性设为 <code>true</code>，则只有数组中指定的属性变动才会被观察。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ulDom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>watchDom<span class="token punctuation">)</span><span class="token punctuation">;</span>

mb<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 观察所有子节点及其子节点属性的变化</span>
  <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">subtree</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">watchDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下面添加子节点，和修改子节点的属性都会触发这个函数的</span>
<span class="token punctuation">}</span>
element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;hh&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>回调接受的参数 <strong>MutationRecord</strong> 数组集合 和 <strong>MutationObserver</strong></p><ul><li><p>第一个参数<strong>MutationRecord</strong> 的数组集合</p><p>是一个变化的数组，每一次的变化都会产生一个 MutationRecord 对象，会添加到回 调函数的第一个参数的数组里面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>MutationRecord 部分参数说明

target		被修改影响的目标节点
type 		字符串，表示变化的类型：<span class="token string">&quot;attributes&quot;</span>、<span class="token string">&quot;characterData&quot;</span>或<span class="token string">&quot;childList&quot;</span>
oldValue 	如果在 MutationObserverInit 对象中启用（attributeOldValue 或characterData OldValue为 <span class="token boolean">true</span>），
<span class="token string">&quot;attributes&quot;</span>或<span class="token string">&quot;characterData&quot;</span>的变化事件会设置这个属性为被替代的值<span class="token string">&quot;childList&quot;</span>类型的变化始终将这个属性设置为 <span class="token keyword">null</span>

attributeName 		对于<span class="token string">&quot;attributes&quot;</span>类型的变化，这里保存被修改属性的名字其他变化事件会将					这个属性设置为 <span class="token keyword">null</span>

attributeNamespace 	对于使用了命名空间的<span class="token string">&quot;attributes&quot;</span>类型的变化，这里保存被修改属性的名字
					其他变化事件会将这个属性设置为 <span class="token keyword">null</span>

addedNodes 			对于<span class="token string">&quot;childList&quot;</span>类型的变化，返回包含变化中添加节点的 NodeList
					默认为空 NodeList

removedNodes 		对于<span class="token string">&quot;childList&quot;</span>类型的变化，返回包含变化中删除节点的 NodeList
					默认为空 NodeList

previousSibling 	对于<span class="token string">&quot;childList&quot;</span>类型的变化，返回变化节点的前一个同胞 Node
					默认为 <span class="token keyword">null</span>

nextSibling 		对于<span class="token string">&quot;childList&quot;</span>类型的变化，返回变化节点的后一个同胞 Node
					默认为 <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>disconnect</strong> 停止监听</p><p>如果不主动去销毁监听，那么它将会一直监听，影响性能，但是<code>disconnect</code>并不是直接按顺序执行， 如果调用了这个方法，那么所有的回调都会被组织掉，所以只能异步的去关闭监听，不然就获取不到任 何回调了。最简单的方式就是通过 setTimeout 去停止监听</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  mb<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>takeRecords</strong></p><p>获取被 disconnect 丢弃的回调，正常情况下，如果调用 disconnect 那么回调函数里面将获取不到 任何回调了，因为他们都被丢弃了，稀释就可以通过 takeRecords() 获取被丢弃的回调</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>在丢弃之前调用即可拿到被丢弃的回调<span class="token punctuation">;</span>
mb<span class="token punctuation">.</span><span class="token function">takeRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [MutationRecord, MutationRecord]</span>
mb<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol>`,13)])])}const i=s(p,[["render",o],["__file","DOM.html.vue"]]);export{i as default};
