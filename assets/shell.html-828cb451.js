import{_ as n,o as a,c as e,e as t}from"./app-70f1c539.js";const l={};function i(d,s){return a(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> shell</h1><h2 id="_1、运行-shell-脚本" tabindex="-1"><a class="header-anchor" href="#_1、运行-shell-脚本" aria-hidden="true">#</a> 1、运行 shell 脚本</h2><p>脚本内容，文件名为<code>test.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello World !&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>&quot;#!&quot; 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p></blockquote><ul><li><p>方式一</p><p>在保存脚本的目录下执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x ./test.sh  <span class="token comment">#使脚本具有执行权限</span>
./test.sh  <span class="token comment">#执行脚本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二</p><p>可以不需要脚本内容的第一行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/bin/sh test.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_2、shell-变量" tabindex="-1"><a class="header-anchor" href="#_2、shell-变量" aria-hidden="true">#</a> 2、shell 变量</h2><h3 id="_2-1-变量" tabindex="-1"><a class="header-anchor" href="#_2-1-变量" aria-hidden="true">#</a> 2.1 变量</h3><ol><li><p>定义变量</p><p>语法：直接变量名=变量值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">variable</span><span class="token operator">=</span><span class="token string">&quot;Hello World!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>变量名、=、变量值三者之间不能有空格</li></ul><ul><li>首个字符必须为字母（a-z，A-Z）。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li></ul></li><li><p>使用变量</p><ul><li><p>方式一：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用 $ + 变量名</span>
<span class="token variable">$variable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用 \${} 包裹住变量变量名</span>
<span class="token variable">\${variable}</span>

<span class="token comment"># 应用场景</span>
<span class="token comment"># 在字符中使用变量</span>
<span class="token string">&quot;this <span class="token variable">\${variable}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="_2-2-字符串" tabindex="-1"><a class="header-anchor" href="#_2-2-字符串" aria-hidden="true">#</a> 2.2 字符串</h3><ol><li><p>单引号字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&#39;variable&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>单引号字符串中不能使用变量</li><li>单引号字符串中不能出现单引号，即使转义也不行</li></ul></li><li><p>双引号字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">&quot;str&quot;</span>
<span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">&quot;this is a <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">\${str1}</span><span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span>
<span class="token builtin class-name">echo</span> str2 <span class="token comment"># this is a &quot;str&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取字符串长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">&quot;字符串&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>str1}</span> <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>截取字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">&quot;this is a str&quot;</span>
<span class="token comment"># 截取下标 2 到 9 的位置的字符</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${str2<span class="token operator">:</span>2<span class="token operator">:</span>9}</span> <span class="token comment"># is is a s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查找字符串索引</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查找 a 在 str3 中的位置，得到的索引会加一</span>
<span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token string">&quot;this is a str&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> index <span class="token string">&quot;<span class="token variable">$str3</span>&quot;</span> a<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2-3-数组" tabindex="-1"><a class="header-anchor" href="#_2-3-数组" aria-hidden="true">#</a> 2.3 数组</h3><ol><li><p>创建数组</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1,2</span>,3,4,5<span class="token punctuation">)</span>

<span class="token comment"># 或者</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读取数组元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># \${数组名[下标]}</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${arr<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读取数组所有元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$arr</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取数组长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 取得数组元素的个数</span>
<span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>

<span class="token comment"># 或者</span>
<span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>

<span class="token comment"># 取得数组第三个元素的长度</span>
<span class="token assign-left variable">length3</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>arr<span class="token punctuation">[</span>3<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2-4-注释" tabindex="-1"><a class="header-anchor" href="#_2-4-注释" aria-hidden="true">#</a> 2.4 注释</h3><p>只有一种注释<code>#</code>，即使是多行也只能每行写<code>#</code></p><h2 id="_3、传递参数" tabindex="-1"><a class="header-anchor" href="#_3、传递参数" aria-hidden="true">#</a> 3、传递参数</h2><ol><li><p>传递参数</p><p>在执行脚本的时候进行参数的传递</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 9 是第一参数， 哈哈 是第二个参数</span>
./test.sh <span class="token number">9</span> <span class="token string">&quot;哈哈&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接受参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 参数</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;shell 名称: <span class="token variable">$0</span>&quot;</span>  <span class="token comment"># $0默认为文件的名称</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数：<span class="token variable">$1</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数：<span class="token variable">$2</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;参数个数：<span class="token variable">$#</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;传递的参数作为一个字符串显示：<span class="token variable">$*</span>&quot;</span>

<span class="token comment"># 执行结果</span>
shell 名称: ./test.sh
第一个参数：9
第二个参数：哈哈
参数个数：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>&gt;=10 的参数格式 \${10}</p></blockquote></li></ol><p><strong>特殊参数</strong></p><table><thead><tr><th>$#</th><th>传递到脚本的参数个数</th></tr></thead><tbody><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。 如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程 ID 号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的 ID 号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。 如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</td></tr><tr><td>$-</td><td>显示 Shell 使用的当前选项，与 set 命令</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="_4、运算符" tabindex="-1"><a class="header-anchor" href="#_4、运算符" aria-hidden="true">#</a> 4、运算符</h2><p><code>expr</code> 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + $b<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>表达式和运算符之间必须要有空格</li><li>完整的表达式要被 \` 包含</li></ul></blockquote><ol><li><p>算数运算符</p><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加法</td><td style="text-align:left;"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减法</td><td style="text-align:left;"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘法</td><td style="text-align:left;"><code>expr $a \\* $b</code> 结果为 200。</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除法</td><td style="text-align:left;"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">取余</td><td style="text-align:left;"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td style="text-align:left;">=</td><td style="text-align:left;">赋值</td><td style="text-align:left;">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td style="text-align:left;">==</td><td style="text-align:left;">相等。用于比较两个数字，相同则返回 true。</td><td style="text-align:left;">[ $a == $b ] 返回 false。</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">不相等。用于比较两个数字，不相同则返回 true。</td><td style="text-align:left;">[ $a != $b ] 返回 true。</td></tr></tbody></table><blockquote><ul><li>条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。</li><li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li></ul></blockquote></li><li><p>关系运算符</p><p><strong>关系运算符的结果不能被<code>echo</code>直接输出，只能作为条件使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;true&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;false&quot;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&#39;a等于b&#39;</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&#39;a不等于b&#39;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">-eq</td><td style="text-align:left;">检测两个数是否相等，相等返回 true。</td><td style="text-align:left;">[ $a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:left;">-ne</td><td style="text-align:left;">检测两个数是否不相等，不相等返回 true。</td><td style="text-align:left;">[ $a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:left;">-gt</td><td style="text-align:left;">检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:left;">[ $a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:left;">-lt</td><td style="text-align:left;">检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:left;">[ $a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:left;">-ge</td><td style="text-align:left;">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:left;">[ $a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:left;">-le</td><td style="text-align:left;">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:left;">[ $a -le $b ] 返回 true。</td></tr></tbody></table></li><li><p>布尔运算符</p><p><strong>布尔运算符的结果不能被<code>echo</code>直接输出，只能作为条件使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token operator">!</span>false <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;true&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;false&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">!</td><td style="text-align:left;">非运算，表达式为 true 则返回 false，否则返回 true。</td><td style="text-align:left;">[ ! false ] 返回 true。</td></tr><tr><td style="text-align:left;">-o</td><td style="text-align:left;">或运算，有一个表达式为 true 则返回 true。</td><td style="text-align:left;">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td style="text-align:left;">-a</td><td style="text-align:left;">与运算，两个表达式都为 true 才返回 true。</td><td style="text-align:left;">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table></li><li><p>逻辑运算符</p><p><strong>逻辑运算符的结果不能被<code>echo</code>直接输出，只能作为条件使用</strong></p><p>假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">逻辑的 AND</td><td style="text-align:left;">[[$a -lt 100 &amp;&amp; $b -gt 100]] 返回 false</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">逻辑的 OR</td><td style="text-align:left;">[[$a -lt 100 || $b -gt 100]] 返回 true</td></tr></tbody></table></li><li><p>字符串运算符</p><p><strong>字符串运算符的结果不能被<code>echo</code>直接输出，只能作为条件使用</strong></p><p>假定变量 a 为 &quot;abc&quot;，变量 b 为 &quot;efg&quot;：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">检测两个字符串是否相等，相等返回 true。</td><td style="text-align:left;">[ $a = $b ] 返回 false。</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">检测两个字符串是否相等，不相等返回 true。</td><td style="text-align:left;">[ $a != $b ] 返回 true。</td></tr><tr><td style="text-align:left;">-z</td><td style="text-align:left;">检测字符串长度是否为 0，为 0 返回 true。</td><td style="text-align:left;">[ -z $a ] 返回 false。</td></tr><tr><td style="text-align:left;">-n</td><td style="text-align:left;">检测字符串长度是否为 0，不为 0 返回 true。</td><td style="text-align:left;">[ -n $a ] 返回 true。</td></tr><tr><td style="text-align:left;">str</td><td style="text-align:left;">检测字符串是否为空，不为空返回 true。</td><td style="text-align:left;">[ $a ] 返回 true。</td></tr></tbody></table></li><li><p>文件测试运算符</p><p><strong>文件测试运算符的结果不能被<code>echo</code>直接输出，只能作为条件使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;/lin/test.sh&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可读&quot;</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可读&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>$file</code>为<code>file=&quot;/lin/test.sh&quot;</code></p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">-b file</td><td style="text-align:left;">检测文件是否是块设备文件，如果是，则返回 true。</td><td style="text-align:left;">[ -b $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-c file</td><td style="text-align:left;">检测文件是否是字符设备文件，如果是，则返回 true。</td><td style="text-align:left;">[ -c $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-d file</td><td style="text-align:left;">检测文件是否是目录，如果是，则返回 true。</td><td style="text-align:left;">[ -d $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-f file</td><td style="text-align:left;">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td style="text-align:left;">[ -f $file ] 返回 true。</td></tr><tr><td style="text-align:left;">-g file</td><td style="text-align:left;">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td style="text-align:left;">[ -g $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-k file</td><td style="text-align:left;">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td style="text-align:left;">[ -k $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-p file</td><td style="text-align:left;">检测文件是否是有名管道，如果是，则返回 true。</td><td style="text-align:left;">[ -p $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-u file</td><td style="text-align:left;">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td style="text-align:left;">[ -u $file ] 返回 false。</td></tr><tr><td style="text-align:left;">-r file</td><td style="text-align:left;">检测文件是否可读，如果是，则返回 true。</td><td style="text-align:left;">[ -r $file ] 返回 true。</td></tr><tr><td style="text-align:left;">-w file</td><td style="text-align:left;">检测文件是否可写，如果是，则返回 true。</td><td style="text-align:left;">[ -w $file ] 返回 true。</td></tr><tr><td style="text-align:left;">-x file</td><td style="text-align:left;">检测文件是否可执行，如果是，则返回 true。</td><td style="text-align:left;">[ -x $file ] 返回 true。</td></tr><tr><td style="text-align:left;">-s file</td><td style="text-align:left;">检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td><td style="text-align:left;">[ -s $file ] 返回 true。</td></tr><tr><td style="text-align:left;">-e file</td><td style="text-align:left;">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td style="text-align:left;">[ -e $file ] 返回 true。</td></tr></tbody></table></li></ol><h2 id="_5、-echo-命令" tabindex="-1"><a class="header-anchor" href="#_5、-echo-命令" aria-hidden="true">#</a> 5、 echo 命令</h2><ol><li><p>显示普通字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;It is a test&quot;</span>

<span class="token comment"># 或者</span>
<span class="token builtin class-name">echo</span> It is a <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显示转义字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span>It is a test<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span>  <span class="token comment">#  &quot;It is a test&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>显示变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;张三&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$name</span> It is a test&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显示换行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;OK!<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token comment"># -e 开启转义</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;It it a test&quot;</span>

<span class="token comment"># 结果</span>
OK<span class="token operator">!</span>

It it a <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显示不换行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;OK! <span class="token entity" title="\\c">\\c</span>&quot;</span> <span class="token comment"># -e 开启转义 \\c 不换行</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;It is a test&quot;</span>

<span class="token comment"># 结果</span>
OK<span class="token operator">!</span> It is a <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显示结果定向至文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;It is a test&quot;</span> <span class="token operator">&gt;</span> myfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>原样输出字符串，不进行转义或取变量（用单引号）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;$name\\&quot;&#39;</span>

<span class="token comment"># 结果</span>
<span class="token variable">$name</span><span class="token punctuation">\\</span>&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显示命令执行的结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span>

<span class="token comment"># 结果</span>
Sat Dec <span class="token number">9</span> <span class="token number">14</span>:41:48 CST <span class="token number">2024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_6、test" tabindex="-1"><a class="header-anchor" href="#_6、test" aria-hidden="true">#</a> 6、test</h2><p>Shell 中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 数值测试</span>
<span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">100</span>
<span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">100</span>
<span class="token keyword">if</span> <span class="token builtin class-name">test</span> $<span class="token punctuation">[</span>num1<span class="token punctuation">]</span> <span class="token parameter variable">-eq</span> $<span class="token punctuation">[</span>num2<span class="token punctuation">]</span>
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数相等！&#39;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数不相等！&#39;</span>
<span class="token keyword">fi</span>

<span class="token comment"># 字符串测试</span>
<span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token assign-left variable">num1</span><span class="token operator">=</span>num2
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个字符串相等!&#39;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个字符串不相等!&#39;</span>
<span class="token keyword">fi</span>

<span class="token comment"># 文件测试</span>
<span class="token builtin class-name">cd</span> /bin
<span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> ./bash
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;文件已存在!&#39;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;文件不存在!&#39;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、流程控制" tabindex="-1"><a class="header-anchor" href="#_7、流程控制" aria-hidden="true">#</a> 7、流程控制</h2><h3 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句" aria-hidden="true">#</a> if 语句</h3><ul><li><p>if</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> 条件
<span class="token keyword">then</span>
	<span class="token comment"># 条件为真执行的代码</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>if else</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> 条件
<span class="token keyword">then</span>
	<span class="token comment"># 条件为真执行的代码</span>
<span class="token keyword">else</span>
	<span class="token comment"># 条件为假执行的代码</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>if else-if else</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> 条件1
<span class="token keyword">then</span>
	<span class="token comment"># 条件1成立执行的代码</span>
<span class="token keyword">elif</span> 条件2
<span class="token keyword">then</span>
	<span class="token comment"># 条件2成立执行的代码</span>
<span class="token keyword">else</span>
	条件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token boolean">true</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;条件1成立&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token boolean">true</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;条件2成立&quot;</span>
<span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;条件都不成立&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h3><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> item1 item2 <span class="token punctuation">..</span>. itemN
<span class="token keyword">do</span>
	<span class="token comment"># 循环执行这里的代码，次数为 in 后面的 item 个数</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
<span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token variable">$item</span> <span class="token comment"># $item 为 in 后的每一项</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h3><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> 条件
<span class="token keyword">do</span>
	<span class="token comment"># 条件为真则执行这里的代码</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><p><code>(())</code>内允许进行算数运算</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">while</span> <span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>
        <span class="token variable"><span class="token punctuation">((</span>int<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="until-循环" tabindex="-1"><a class="header-anchor" href="#until-循环" aria-hidden="true">#</a> until 循环</h3><p>与 while 循环刚好相反，只有条件为假的时候才进入循环</p><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">until</span> 条件
<span class="token keyword">do</span>
	<span class="token comment"># 条件为假则执行这里的代码</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case-选择" tabindex="-1"><a class="header-anchor" href="#case-选择" aria-hidden="true">#</a> case 选择</h3><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">case</span> 值 <span class="token keyword">in</span>
	值1<span class="token punctuation">)</span>  <span class="token comment"># 如果 值 == 值1 则执行这里的代码</span>
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
	值2<span class="token punctuation">)</span> <span class="token comment"># 如果 值 == 值2 则执行这里的代码</span>
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">case</span> <span class="token string">&quot;哈哈&quot;</span> <span class="token keyword">in</span>
    <span class="token string">&quot;哈哈&quot;</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;匹配了哈哈&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token string">&quot;嘿嘿&quot;</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;匹配和嘿嘿&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
<span class="token comment"># 最终输出了 匹配了哈哈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="break-跳出所有循环" tabindex="-1"><a class="header-anchor" href="#break-跳出所有循环" aria-hidden="true">#</a> break 跳出所有循环</h3><h3 id="continue-跳出当前循环" tabindex="-1"><a class="header-anchor" href="#continue-跳出当前循环" aria-hidden="true">#</a> continue 跳出当前循环</h3><h2 id="_8、函数" tabindex="-1"><a class="header-anchor" href="#_8、函数" aria-hidden="true">#</a> 8、函数</h2><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token keyword">function</span> <span class="token punctuation">]</span> funname <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    action<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>return int<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><ul><li><p>带有 function 关键字的函数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">function</span> <span class="token function-name function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;我是函数fun运行的结果&quot;</span>
<span class="token punctuation">}</span>
fun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>忽略 function 关键字函数，并且使用了传递的参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;我是文件名：<span class="token variable">$0</span>&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;我是函数的第一个参数：<span class="token variable">$1</span>&quot;</span> 
<span class="token punctuation">}</span>

<span class="token comment"># 运行 fun1 函数并且传递第一个参数 </span>
fun1 <span class="token string">&quot;哈哈&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>带有返回值的函数</p><p>函数返回值在调用该函数后通过 $? 来获得。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">funReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token variable">))</span></span>
<span class="token punctuation">}</span>
funReturn

<span class="token comment"># 函数返回值在调用该函数后通过 $? 来获得。</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;funReturn的函数返回值是：<span class="token variable">$?</span> &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>特殊字符用来处理参数</p><table><thead><tr><th style="text-align:left;">参数处理</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">$#</td><td style="text-align:left;">传递到脚本的参数个数</td></tr><tr><td style="text-align:left;">$*</td><td style="text-align:left;">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td style="text-align:left;">$$</td><td style="text-align:left;">脚本运行的当前进程ID号</td></tr><tr><td style="text-align:left;">$!</td><td style="text-align:left;">后台运行的最后一个进程的ID号</td></tr><tr><td style="text-align:left;">$@</td><td style="text-align:left;">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td style="text-align:left;">$-</td><td style="text-align:left;">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td style="text-align:left;">$?</td><td style="text-align:left;">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="_9、输入-输出重定向" tabindex="-1"><a class="header-anchor" href="#_9、输入-输出重定向" aria-hidden="true">#</a> 9、输入/输出重定向</h2><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">command &gt; file</td><td style="text-align:left;">将输出重定向到 file。</td></tr><tr><td style="text-align:left;">command &lt; file</td><td style="text-align:left;">将输入重定向到 file。</td></tr><tr><td style="text-align:left;">command &gt;&gt; file</td><td style="text-align:left;">将输出以追加的方式重定向到 file。</td></tr><tr><td style="text-align:left;">n &gt; file</td><td style="text-align:left;">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td style="text-align:left;">n &gt;&gt; file</td><td style="text-align:left;">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td style="text-align:left;">n &gt;&amp; m</td><td style="text-align:left;">将输出文件 m 和 n 合并。</td></tr><tr><td style="text-align:left;">n &lt;&amp; m</td><td style="text-align:left;">将输入文件 m 和 n 合并。</td></tr><tr><td style="text-align:left;">&lt;&lt; tag</td><td style="text-align:left;">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><ul><li><p>输出重定向</p><p>读取<code>test.txt</code>中的内容，追加到<code>lin.txt</code>的内容里面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> test.txt <span class="token operator">&gt;&gt;</span> lin.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>输入重定向</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># input.txt的内容</span>
Hello
World
Shell
Programming

<span class="token comment"># 执行命令，条命令会搜索input.txt文件中包含字符串&quot;World&quot;的行，并将结果输出到终端</span>
<span class="token function">grep</span> <span class="token string">&quot;World&quot;</span> <span class="token operator">&lt;</span> input.txt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_10、文件包含-文件导入" tabindex="-1"><a class="header-anchor" href="#_10、文件包含-文件导入" aria-hidden="true">#</a> 10、文件包含（文件导入）</h2><p><code>test.sh</code>文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">&quot;ldlang.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test1.sh</code>文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment">#使用 . 号来引用test.sh 文件</span>
<span class="token comment"># . ./test.sh</span>

<span class="token comment"># 或者使用 source 来导入</span>
<span class="token builtin class-name">source</span> ./test.sh

<span class="token comment"># 使用 test.sh 中 host 变量</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;host地址为：<span class="token variable">$host</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71)])])}const c=n(l,[["render",i],["__file","shell.html.vue"]]);export{c as default};
