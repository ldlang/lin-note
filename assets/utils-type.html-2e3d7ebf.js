import{_ as s,o as n,c as e,e as t}from"./app-70f1c539.js";const p={};function d(o,a){return n(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="实用工具类型" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#实用工具类型" aria-hidden="true" data-v-45aea122>#</a> 实用工具类型</h1><h2 id="awaited-type-取出-promise-的返回值类型" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#awaited-type-取出-promise-的返回值类型" aria-hidden="true" data-v-45aea122>#</a> Awaited&lt;<code data-v-45aea122>Type</code>&gt; 取出 promise 的返回值类型</h2><p data-v-45aea122>这种类型旨在模拟 <code data-v-45aea122>async</code> 函数中的 <code data-v-45aea122>await</code> 之类的操作，或 <code data-v-45aea122>Promise</code> 上的 <code data-v-45aea122>.then()</code> 方法 - 特别是它们递归解包 <code data-v-45aea122>Promise</code> 的方式。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>A</span></span> <span class="token operator" data-v-45aea122>=</span> Awaited<span class="token operator" data-v-45aea122>&lt;</span><span class="token builtin" data-v-45aea122>Promise</span><span class="token operator" data-v-45aea122>&lt;</span><span class="token builtin" data-v-45aea122>string</span><span class="token operator" data-v-45aea122>&gt;&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div></div></div><h2 id="partial-type-变为可选" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#partial-type-变为可选" aria-hidden="true" data-v-45aea122>#</a> Partial&lt;<code data-v-45aea122>Type</code>&gt; 变为可选</h2><p data-v-45aea122>构造一个将 <code data-v-45aea122>Type</code> 的所有属性设置为可选的类型。 此实用程序将返回一个表示给定类型的所有子集的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>A</span></span> <span class="token punctuation" data-v-45aea122>{</span>
  a<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>;</span>
  b<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token comment" data-v-45aea122>// 在B类型中所有的属性都变为可选属性</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>B</span></span> <span class="token operator" data-v-45aea122>=</span> Partial<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="required-type-变为必选" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#required-type-变为必选" aria-hidden="true" data-v-45aea122>#</a> Required&lt;<code data-v-45aea122>Type</code>&gt; 变为必选</h2><p data-v-45aea122>构造一个由设置为 required 的 <code data-v-45aea122>Type</code> 的所有属性组成的类型。 与 Partial 相反。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>A</span></span> <span class="token punctuation" data-v-45aea122>{</span>
  a<span class="token operator" data-v-45aea122>?</span><span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>;</span>
  b<span class="token operator" data-v-45aea122>?</span><span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token comment" data-v-45aea122>// 在B类型中所有的属性都变为必选属性</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>B</span></span> <span class="token operator" data-v-45aea122>=</span> Required<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="readonly-type-变为只读" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#readonly-type-变为只读" aria-hidden="true" data-v-45aea122>#</a> Readonly&lt;<code data-v-45aea122>Type</code>&gt; 变为只读</h2><p data-v-45aea122>构造一个将 <code data-v-45aea122>Type</code> 的所有属性设置为 <code data-v-45aea122>readonly</code> 的类型，这意味着构造类型的属性不能重新分配。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>A</span></span> <span class="token punctuation" data-v-45aea122>{</span>
  a<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>;</span>
  b<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token comment" data-v-45aea122>// 在B类型中所有的属性都变为了只读属性</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>B</span></span> <span class="token operator" data-v-45aea122>=</span> Readonly<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="record-keys-type-返回-keys-和-type-组成对象类型" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#record-keys-type-返回-keys-和-type-组成对象类型" aria-hidden="true" data-v-45aea122>#</a> Record&lt;Keys, Type&gt; 返回 keys 和 Type 组成对象类型</h2><p data-v-45aea122>构造一个对象类型，其属性键为 <code data-v-45aea122>Keys</code>，其属性值为 <code data-v-45aea122>Type</code>。 此实用程序可用于将一种类型的属性映射到另一种类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122>CatInfo</span> <span class="token punctuation" data-v-45aea122>{</span>
  age<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
  breed<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122>CatName</span> <span class="token operator" data-v-45aea122>=</span> <span class="token string" data-v-45aea122>&quot;miffy&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;boris&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;mordred&quot;</span><span class="token punctuation" data-v-45aea122>;</span>

<span class="token keyword" data-v-45aea122>const</span> cats<span class="token operator" data-v-45aea122>:</span> Record<span class="token operator" data-v-45aea122>&lt;</span>CatName<span class="token punctuation" data-v-45aea122>,</span> CatInfo<span class="token operator" data-v-45aea122>&gt;</span> <span class="token operator" data-v-45aea122>=</span> <span class="token punctuation" data-v-45aea122>{</span>
  miffy<span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>{</span> age<span class="token operator" data-v-45aea122>:</span> <span class="token number" data-v-45aea122>10</span><span class="token punctuation" data-v-45aea122>,</span> breed<span class="token operator" data-v-45aea122>:</span> <span class="token string" data-v-45aea122>&quot;Persian&quot;</span> <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>,</span>
  boris<span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>{</span> age<span class="token operator" data-v-45aea122>:</span> <span class="token number" data-v-45aea122>5</span><span class="token punctuation" data-v-45aea122>,</span> breed<span class="token operator" data-v-45aea122>:</span> <span class="token string" data-v-45aea122>&quot;Maine Coon&quot;</span> <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>,</span>
  mordred<span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>{</span> age<span class="token operator" data-v-45aea122>:</span> <span class="token number" data-v-45aea122>16</span><span class="token punctuation" data-v-45aea122>,</span> breed<span class="token operator" data-v-45aea122>:</span> <span class="token string" data-v-45aea122>&quot;British Shorthair&quot;</span> <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>,</span>
<span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="pick-type-keys-挑选keys是type里面被选定的键名" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#pick-type-keys-挑选keys是type里面被选定的键名" aria-hidden="true" data-v-45aea122>#</a> Pick&lt;Type, Keys&gt; 挑选<code data-v-45aea122>Keys</code>是<code data-v-45aea122>Type</code>里面被选定的键名</h2><p data-v-45aea122>通过从 <code data-v-45aea122>Type</code> 中选取一组属性 <code data-v-45aea122>Keys</code>（字符串字面或字符串字面的并集）来构造一个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>A</span></span> <span class="token punctuation" data-v-45aea122>{</span>
  x<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
  y<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T1</span></span> <span class="token operator" data-v-45aea122>=</span> Pick<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;x&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// { x: number }</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T2</span></span> <span class="token operator" data-v-45aea122>=</span> Pick<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;y&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// { y: number }</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T3</span></span> <span class="token operator" data-v-45aea122>=</span> Pick<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;x&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;y&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// { x: number; y: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="omit-type-keys-删除指定的属性keys" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#omit-type-keys-删除指定的属性keys" aria-hidden="true" data-v-45aea122>#</a> Omit&lt;Type, Keys&gt; 删除指定的属性<code data-v-45aea122>Keys</code></h2><p data-v-45aea122>通过从 <code data-v-45aea122>Type</code> 中选择所有属性然后删除 <code data-v-45aea122>Keys</code>（字符串字面或字符串字面的并集）来构造一个类型。 与 Pick 相反。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>A</span></span> <span class="token punctuation" data-v-45aea122>{</span>
  x<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
  y<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T1</span></span> <span class="token operator" data-v-45aea122>=</span> Omit<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;x&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// { y: number }</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T2</span></span> <span class="token operator" data-v-45aea122>=</span> Omit<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;y&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// { x: number }</span>
<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T3</span></span> <span class="token operator" data-v-45aea122>=</span> Omit<span class="token operator" data-v-45aea122>&lt;</span><span class="token constant" data-v-45aea122>A</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;x&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;y&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// { }</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="exclude-uniontype-excludedmembers-交集之外的" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#exclude-uniontype-excludedmembers-交集之外的" aria-hidden="true" data-v-45aea122>#</a> Exclude&lt;UnionType, ExcludedMembers&gt; 交集之外的</h2><p data-v-45aea122>通过从 <code data-v-45aea122>UnionType</code> 中排除所有可分配给 <code data-v-45aea122>ExcludedMembers</code> 的联合成员来构造一个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T0</span></span> <span class="token operator" data-v-45aea122>=</span> Exclude<span class="token operator" data-v-45aea122>&lt;</span><span class="token string" data-v-45aea122>&quot;a&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;b&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;c&quot;</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;a&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token comment" data-v-45aea122>// type T0 = &quot;b&quot; | &quot;c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="extract-type-union-交集" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#extract-type-union-交集" aria-hidden="true" data-v-45aea122>#</a> Extract&lt;Type, Union&gt; 交集</h2><p data-v-45aea122>通过从 <code data-v-45aea122>Type</code> 中提取所有可分配给 <code data-v-45aea122>Union</code> 的联合成员来构造一个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T0</span></span> <span class="token operator" data-v-45aea122>=</span> Extract<span class="token operator" data-v-45aea122>&lt;</span><span class="token string" data-v-45aea122>&quot;a&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;b&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;c&quot;</span><span class="token punctuation" data-v-45aea122>,</span> <span class="token string" data-v-45aea122>&quot;a&quot;</span> <span class="token operator" data-v-45aea122>|</span> <span class="token string" data-v-45aea122>&quot;f&quot;</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token comment" data-v-45aea122>// type T0 = &quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="nonnullable-type-从-type-中排除-null-和-undefined-来构造一个类型。" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#nonnullable-type-从-type-中排除-null-和-undefined-来构造一个类型。" aria-hidden="true" data-v-45aea122>#</a> NonNullable&lt;<code data-v-45aea122>Type</code>&gt;从 <code data-v-45aea122>Type</code> 中排除 <code data-v-45aea122>null</code> 和 <code data-v-45aea122>undefined</code> 来构造一个类型。</h2><p data-v-45aea122>通过从 <code data-v-45aea122>Type</code> 中排除 <code data-v-45aea122>null</code> 和 <code data-v-45aea122>undefined</code> 来构造一个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T0</span></span> <span class="token operator" data-v-45aea122>=</span> NonNullable<span class="token operator" data-v-45aea122>&lt;</span><span class="token builtin" data-v-45aea122>string</span> <span class="token operator" data-v-45aea122>|</span> <span class="token builtin" data-v-45aea122>number</span> <span class="token operator" data-v-45aea122>|</span> <span class="token keyword" data-v-45aea122>undefined</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token comment" data-v-45aea122>// type T0 = string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="parameters-type-函数类型type里面提取参数类型-组成一个元组返回。" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#parameters-type-函数类型type里面提取参数类型-组成一个元组返回。" aria-hidden="true" data-v-45aea122>#</a> Parameters&lt;<code data-v-45aea122>Type</code>&gt; 函数类型<code data-v-45aea122>Type</code>里面提取参数类型，组成一个元组返回。</h2><p data-v-45aea122>从函数类型 <code data-v-45aea122>Type</code> 的参数中使用的类型构造元组类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T1</span></span> <span class="token operator" data-v-45aea122>=</span> Parameters<span class="token operator" data-v-45aea122>&lt;</span><span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token builtin" data-v-45aea122>string</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// []</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T2</span></span> <span class="token operator" data-v-45aea122>=</span> Parameters<span class="token operator" data-v-45aea122>&lt;</span><span class="token punctuation" data-v-45aea122>(</span>s<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token keyword" data-v-45aea122>void</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// [s:string]</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T3</span></span> <span class="token operator" data-v-45aea122>=</span> Parameters<span class="token operator" data-v-45aea122>&lt;&lt;</span><span class="token constant" data-v-45aea122>T</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>(</span>arg<span class="token operator" data-v-45aea122>:</span> <span class="token constant" data-v-45aea122>T</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token constant" data-v-45aea122>T</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// [arg: unknown]</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T4</span></span> <span class="token operator" data-v-45aea122>=</span> Parameters<span class="token operator" data-v-45aea122>&lt;</span><span class="token punctuation" data-v-45aea122>(</span>x<span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>{</span> a<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span> b<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span> <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token keyword" data-v-45aea122>void</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// [x: { a: number, b: string }]</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T5</span></span> <span class="token operator" data-v-45aea122>=</span> Parameters<span class="token operator" data-v-45aea122>&lt;</span><span class="token punctuation" data-v-45aea122>(</span>a<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>,</span> b<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token builtin" data-v-45aea122>number</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// [a:number, b:number]</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="constructorparameters-type-提取构造方法type的参数类型-组成一个元组类型返回。" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#constructorparameters-type-提取构造方法type的参数类型-组成一个元组类型返回。" aria-hidden="true" data-v-45aea122>#</a> ConstructorParameters&lt;<code data-v-45aea122>Type</code>&gt; 提取构造方法<code data-v-45aea122>Type</code>的参数类型，组成一个元组类型返回。</h2><p data-v-45aea122>从构造函数类型的类型构造元组或数组类型。 它生成一个包含所有参数类型的元组类型（如果 <code data-v-45aea122>Type</code> 不是函数，则生成类型 <code data-v-45aea122>never</code>）。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T1</span></span> <span class="token operator" data-v-45aea122>=</span> ConstructorParameters<span class="token operator" data-v-45aea122>&lt;</span><span class="token keyword" data-v-45aea122>new</span> <span class="token punctuation" data-v-45aea122>(</span>x<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>,</span> y<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> object<span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// [x: string, y: number]</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div></div></div><h2 id="returntype-type-读取函数返回值类型" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#returntype-type-读取函数返回值类型" aria-hidden="true" data-v-45aea122>#</a> ReturnType&lt;<code data-v-45aea122>Type</code>&gt; 读取函数返回值类型</h2><p data-v-45aea122>构造一个由函数 <code data-v-45aea122>Type</code> 的返回类型组成的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>declare</span> <span class="token keyword" data-v-45aea122>function</span> <span class="token function" data-v-45aea122>f1</span><span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span><span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>{</span> a<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>;</span> b<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span> <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>;</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T0</span></span> <span class="token operator" data-v-45aea122>=</span> ReturnType<span class="token operator" data-v-45aea122>&lt;</span><span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token builtin" data-v-45aea122>string</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token comment" data-v-45aea122>// type T0 = string</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="instancetype-type-提取构造函数的返回值的类型" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#instancetype-type-提取构造函数的返回值的类型" aria-hidden="true" data-v-45aea122>#</a> InstanceType&lt;<code data-v-45aea122>Type</code>&gt; 提取构造函数的返回值的类型</h2><p data-v-45aea122>构造一个由 <code data-v-45aea122>Type</code> 中的构造函数的实例类型组成的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>class</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>C</span></span> <span class="token punctuation" data-v-45aea122>{</span>
  x <span class="token operator" data-v-45aea122>=</span> <span class="token number" data-v-45aea122>0</span><span class="token punctuation" data-v-45aea122>;</span>
  y <span class="token operator" data-v-45aea122>=</span> <span class="token number" data-v-45aea122>0</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T0</span></span> <span class="token operator" data-v-45aea122>=</span> InstanceType<span class="token operator" data-v-45aea122>&lt;</span><span class="token keyword" data-v-45aea122>typeof</span> <span class="token constant" data-v-45aea122>C</span><span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token comment" data-v-45aea122>// type T0 = C</span>
<span class="token keyword" data-v-45aea122>let</span> c<span class="token operator" data-v-45aea122>:</span> <span class="token constant" data-v-45aea122>T0</span> <span class="token operator" data-v-45aea122>=</span> <span class="token keyword" data-v-45aea122>new</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>C</span></span><span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="thisparametertype-type-提取函数类型中this参数的类型。" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#thisparametertype-type-提取函数类型中this参数的类型。" aria-hidden="true" data-v-45aea122>#</a> ThisParameterType&lt;<code data-v-45aea122>Type</code>&gt; 提取函数类型中<code data-v-45aea122>this</code>参数的类型。</h2><p data-v-45aea122>提取函数类型的此参数的类型，如果函数类型没有 <code data-v-45aea122>this</code> 参数，则提取 unknown。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>function</span> <span class="token function" data-v-45aea122>toHex</span><span class="token punctuation" data-v-45aea122>(</span><span class="token keyword" data-v-45aea122>this</span><span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>number</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token punctuation" data-v-45aea122>{</span>
  <span class="token keyword" data-v-45aea122>return</span> <span class="token keyword" data-v-45aea122>this</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>toString</span><span class="token punctuation" data-v-45aea122>(</span><span class="token number" data-v-45aea122>16</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T</span></span> <span class="token operator" data-v-45aea122>=</span> ThisParameterType<span class="token operator" data-v-45aea122>&lt;</span><span class="token keyword" data-v-45aea122>typeof</span> toHex<span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// number</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="omitthisparameter-type-函数类型中移除-this-参数。" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#omitthisparameter-type-函数类型中移除-this-参数。" aria-hidden="true" data-v-45aea122>#</a> OmitThisParameter&lt;<code data-v-45aea122>Type</code>&gt; 函数类型中移除 this 参数。</h2><p data-v-45aea122>从 <code data-v-45aea122>Type</code> 中删除 this 参数。 如果 <code data-v-45aea122>Type</code> 没有显式声明的 <code data-v-45aea122>this</code> 参数，则结果只是 <code data-v-45aea122>Type</code>。 否则，将从 <code data-v-45aea122>Type</code> 创建一个没有 <code data-v-45aea122>this</code> 参数的新函数类型。 泛型被删除，只有最后一个重载签名被传播到新的函数类型中。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>function</span> <span class="token function" data-v-45aea122>toHex</span><span class="token punctuation" data-v-45aea122>(</span><span class="token keyword" data-v-45aea122>this</span><span class="token operator" data-v-45aea122>:</span> Number<span class="token punctuation" data-v-45aea122>)</span> <span class="token punctuation" data-v-45aea122>{</span>
  <span class="token keyword" data-v-45aea122>return</span> <span class="token keyword" data-v-45aea122>this</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>toString</span><span class="token punctuation" data-v-45aea122>(</span><span class="token number" data-v-45aea122>16</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>type</span> <span class="token class-name" data-v-45aea122><span class="token constant" data-v-45aea122>T</span></span> <span class="token operator" data-v-45aea122>=</span> OmitThisParameter<span class="token operator" data-v-45aea122>&lt;</span><span class="token keyword" data-v-45aea122>typeof</span> toHex<span class="token operator" data-v-45aea122>&gt;</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// () =&gt; stringfunction toHex(this: Number) {</span>
  <span class="token keyword" data-v-45aea122>return</span> <span class="token keyword" data-v-45aea122>this</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>toString</span><span class="token punctuation" data-v-45aea122>(</span><span class="token number" data-v-45aea122>16</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>const</span> fiveToHex<span class="token operator" data-v-45aea122>:</span> OmitThisParameter<span class="token operator" data-v-45aea122>&lt;</span><span class="token keyword" data-v-45aea122>typeof</span> toHex<span class="token operator" data-v-45aea122>&gt;</span> <span class="token operator" data-v-45aea122>=</span> <span class="token function" data-v-45aea122>toHex</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>bind</span><span class="token punctuation" data-v-45aea122>(</span><span class="token number" data-v-45aea122>5</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span>

<span class="token builtin" data-v-45aea122>console</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>log</span><span class="token punctuation" data-v-45aea122>(</span><span class="token function" data-v-45aea122>fiveToHex</span><span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="thistype-type-不返回类型-只用来跟其他类型组成交叉类型" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#thistype-type-不返回类型-只用来跟其他类型组成交叉类型" aria-hidden="true" data-v-45aea122>#</a> ThisType&lt;<code data-v-45aea122>Type</code>&gt; 不返回类型，只用来跟其他类型组成交叉类型</h2><p data-v-45aea122>此实用程序不返回转换后的类型。 相反，它用作上下文 this 类型的标记。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-v-45aea122><pre class="language-typescript" data-v-45aea122><code data-v-45aea122><span class="token keyword" data-v-45aea122>interface</span> <span class="token class-name" data-v-45aea122>HelperThisValue</span> <span class="token punctuation" data-v-45aea122>{</span>
  <span class="token function-variable function" data-v-45aea122>logError</span><span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>(</span>error<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token operator" data-v-45aea122>=&gt;</span> <span class="token keyword" data-v-45aea122>void</span><span class="token punctuation" data-v-45aea122>;</span>
<span class="token punctuation" data-v-45aea122>}</span>

<span class="token keyword" data-v-45aea122>let</span> helperFunctions<span class="token operator" data-v-45aea122>:</span> <span class="token punctuation" data-v-45aea122>{</span> <span class="token punctuation" data-v-45aea122>[</span>name<span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>string</span><span class="token punctuation" data-v-45aea122>]</span><span class="token operator" data-v-45aea122>:</span> <span class="token builtin" data-v-45aea122>Function</span> <span class="token punctuation" data-v-45aea122>}</span> <span class="token operator" data-v-45aea122>&amp;</span> ThisType<span class="token operator" data-v-45aea122>&lt;</span>HelperThisValue<span class="token operator" data-v-45aea122>&gt;</span> <span class="token operator" data-v-45aea122>=</span>
  <span class="token punctuation" data-v-45aea122>{</span>
    <span class="token function-variable function" data-v-45aea122>hello</span><span class="token operator" data-v-45aea122>:</span> <span class="token keyword" data-v-45aea122>function</span> <span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span> <span class="token punctuation" data-v-45aea122>{</span>
      <span class="token keyword" data-v-45aea122>this</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>logError</span><span class="token punctuation" data-v-45aea122>(</span><span class="token string" data-v-45aea122>&quot;Error: Something wrong!&quot;</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// 正确</span>
      <span class="token keyword" data-v-45aea122>this</span><span class="token punctuation" data-v-45aea122>.</span><span class="token function" data-v-45aea122>update</span><span class="token punctuation" data-v-45aea122>(</span><span class="token punctuation" data-v-45aea122>)</span><span class="token punctuation" data-v-45aea122>;</span> <span class="token comment" data-v-45aea122>// 报错</span>
    <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>,</span>
  <span class="token punctuation" data-v-45aea122>}</span><span class="token punctuation" data-v-45aea122>;</span>
</code></pre><div class="line-numbers" aria-hidden="true" data-v-45aea122><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div><div class="line-number" data-v-45aea122></div></div></div><h2 id="readonlyarray-只读数组" tabindex="-1" data-v-45aea122><a class="header-anchor" href="#readonlyarray-只读数组" aria-hidden="true" data-v-45aea122>#</a> ReadonlyArray 只读数组</h2><p data-v-45aea122><code data-v-45aea122>ReadonlyArray&lt;Type&gt;</code>用来生成一个只读数组类型，类型参数<code data-v-45aea122>Type</code>表示数组成员的类型。</p>`,54)])])}const v=s(p,[["render",d],["__scopeId","data-v-45aea122"],["__file","utils-type.html.vue"]]);export{v as default};
