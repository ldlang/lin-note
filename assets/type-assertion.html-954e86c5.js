import{_ as n,o as a,c as e,e as t}from"./app-70f1c539.js";const p={};function o(c,s){return a(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h1><h2 id="_1、基础说明" tabindex="-1"><a class="header-anchor" href="#_1、基础说明" aria-hidden="true">#</a> 1、基础说明</h2><ul><li><p>语法</p><ol><li><p><code>&lt;类型&gt;值</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> personZ<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>值 as 类型</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> personZ<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> person <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>有些时候，<code>TS</code>自己的类型推断，推断出来的类型并不是我们想要的类型，这样再去使用这个类型的时候就会报错，使用类型断言就是告诉<code>TS</code>这个类型应该被推断为什么样子，这样<code>TS</code>就会跳过对这个类型的检查，使用断言后的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TPersons</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;LS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;WZ&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// person 被推断为了 string ,给 personZ 就会报错</span>
<span class="token keyword">const</span> personZ<span class="token operator">:</span> TPersons <span class="token operator">=</span> person<span class="token punctuation">;</span>

<span class="token comment">// 正确方式</span>
<span class="token keyword">const</span> personZ<span class="token operator">:</span> TPersons <span class="token operator">=</span> person <span class="token keyword">as</span> TPersons<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于<code>unknown</code>类型就需要使用类型断言来确定类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> personZ<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> person <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_2、类型断言的条件" tabindex="-1"><a class="header-anchor" href="#_2、类型断言的条件" aria-hidden="true">#</a> 2、类型断言的条件</h2><ul><li><p>类型断言并不能直接将一个类型断言为与当前类型毫无相关的类型，类型断言的实际类型和断言的类型要兼容，可以将其断言为一个更<strong>广泛</strong>或者更<strong>精准</strong>的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 类型 &quot;number&quot; 到类型 &quot;string&quot; 的转换可能是错误的，因为两种类型不能充分重叠。</span>
<span class="token comment">// 如果这是有意的，请先将表达式转换为 &quot;unknown&quot;。</span>
<span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> num <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>非要强行断言为一个毫不相干的类型，可以先断言为<code>any</code>或者<code>unkonwn</code>类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> num <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3、as-const-断言" tabindex="-1"><a class="header-anchor" href="#_3、as-const-断言" aria-hidden="true">#</a> 3、as const 断言</h2><p><strong>const 断言只能作用于枚举成员、字符串、数字、布尔值、数组或对象字面量，会将字面量的类型断言为不可变类型，缩小成 TypeScript 允许的最小类型。</strong></p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><ol><li><p><code>值 as const</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>&lt;const&gt;值</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">const</span><span class="token operator">&gt;</span><span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="断言为常量" tabindex="-1"><a class="header-anchor" href="#断言为常量" aria-hidden="true">#</a> 断言为常量</h3><p>如果使用<code>let</code>来定义一个变量，那么一般会被推断为<code>TS</code>内置的类型，如果使用<code>const</code>来定义，值就会被推断为常量类型(元组)，此时就可以使用<code>as const</code>来让他变成常量，之后这个变量的值也不能被更改了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果没有使用 as const 断言，那么 person 会被推断为 string 类型</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token comment">// 等价于</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TPersons</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;LS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;WZ&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> personZS<span class="token operator">:</span> TPersons <span class="token operator">=</span> person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言限制" tabindex="-1"><a class="header-anchor" href="#断言限制" aria-hidden="true">#</a> 断言限制</h3><p>const 断言只能作用于枚举成员、字符串、数字、布尔值、数组或对象字面量，用于断言表单或者变量就会报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TPersons</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;LS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;WZ&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 报错 &#39;const&#39; 断言只能作用于枚举成员、字符串、数字、布尔值、数组或对象字面量</span>
<span class="token keyword">const</span> personZS<span class="token operator">:</span> TPersons <span class="token operator">=</span> person <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言对象" tabindex="-1"><a class="header-anchor" href="#断言对象" aria-hidden="true">#</a> 断言对象</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类型是 { x: number; y: number; }</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 类型是 { x: 1; y: number; }</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 类型是 { readonly x: 1; readonly y: 2; }</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言数组" tabindex="-1"><a class="header-anchor" href="#断言数组" aria-hidden="true">#</a> 断言数组</h3><ul><li><p>如果没有使用<code>as const</code>对<code>persons</code>断言，那<code>persons</code>就会被推断为 <code>string[]</code>，那么则不能对<code>personZS</code>赋值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ZS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;LS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WZ&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TPersons</span> <span class="token operator">=</span> <span class="token string">&quot;ZS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;LS&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;WZ&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> personZS<span class="token operator">:</span> TPersons <span class="token operator">=</span> persons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>给函数传入<code>rest</code>（使用<code>...</code>拓展后的不定量参数）参，下面如果没有使用<code>as const</code>断言，那么<code>add</code>函数不知道<code>...nums</code>有几个参数，<code>add</code>函数就不能使用<code>...nums</code>作为<code>rest</code>参数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 类型 readonly [1, 2]</span>
<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="断言枚举" tabindex="-1"><a class="header-anchor" href="#断言枚举" aria-hidden="true">#</a> 断言枚举</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  red<span class="token punctuation">,</span>
  green<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// red 的类型为 Color</span>
<span class="token keyword">let</span> red <span class="token operator">=</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">;</span>

<span class="token comment">// green 就能具体到 Color.green 类型</span>
<span class="token keyword">let</span> green <span class="token operator">=</span> Color<span class="token punctuation">.</span>green <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、非空断言" tabindex="-1"><a class="header-anchor" href="#_4、非空断言" aria-hidden="true">#</a> 4、非空断言</h2><p>对于一些<strong>可选属性</strong>或者是<strong>不一定有值</strong>的变量，在使用这些变量的时候，我们知道这个变量是一定有值的，但<code>TS</code>不知道，这个时候就可以使用非空断言，告诉<code>TS</code>这个一定有值，但是在不一定有值的是有最好还是加上非空的判断。非空断言只有在打开编译选项<code>strictNullChecks</code>时才有意义。如果不打开这个选项，编译器就不会检查某个变量是否可能为<code>undefined</code>或<code>null</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// x 是可选属性，不一定有值，所以他可能为 undefined 再去调 toFixed 就会报错，</span>
<span class="token comment">// 加入 非空断言 TS就认为他是有值的，TS 就不会报错。</span>
<span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 也可以使用链判断运算符</span>
<span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token operator">?.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user<span class="token operator">:</span> IUser <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 如果不加入 非空断言， 那么toName的类型就是 string | undefined，介入非空断言则是 string</span>
<span class="token keyword">let</span> toName <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token operator">!</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、断言函数" tabindex="-1"><a class="header-anchor" href="#_5、断言函数" aria-hidden="true">#</a> 5、断言函数</h2><p>断言函数是一种特殊函数，用于保证函数参数符合某种类型。如果函数参数达不到要求，就会抛出错误，中断程序执行；如果达到要求，就不进行任何操作，让代码按照正常流程运行。</p><p><strong>说明：</strong> <code>asserts x is string</code>其中<code>asserts ... is</code>是关键字，<code>x</code>是函数的参数名，<code>string</code>是函数参数的预期类型，这里代表的的意思是，告诉<code>TS</code>如果传入的参数类型不是<code>string</code>，那么程序就会中断。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">asserts</span> x <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Not a string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toUpper</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">isString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>断言函数的<code>asserts</code>语句等同于<code>void</code>类型，所以如果返回除了<code>undefined</code>和<code>null</code>以外的值，都会报错。</p></blockquote>`,30)])])}const i=n(p,[["render",o],["__file","type-assertion.html.vue"]]);export{i as default};
