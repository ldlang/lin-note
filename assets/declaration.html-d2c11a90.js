import{_ as p,r as o,o as i,c as l,e,b as s,d as a,a as c}from"./app-70f1c539.js";const r={},d={href:"https://github.com/DefinitelyTyped/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"};function u(k,n){const t=o("ExternalLinkIcon");return i(),l("div",null,[n[12]||(n[12]=e(`<h1 id="d-ts-类型声明文件" tabindex="-1"><a class="header-anchor" href="#d-ts-类型声明文件" aria-hidden="true">#</a> .d.ts 类型声明文件</h1><h2 id="_1、基础说明" tabindex="-1"><a class="header-anchor" href="#_1、基础说明" aria-hidden="true">#</a> 1、基础说明</h2><p>单独使用的模块一般都有一个单独的类型声明文件，里面描述该模块的属性、方法等，以供使用者了解和编译器检查。类型声文件一般为<code>[模块名].d.ts</code>的形式。</p><ol><li><p>一个模块的实现和声明文件的实现</p><ul><li><p>模块实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">string</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>模块的声明文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>声明文件的使用</p><ul><li><p>声明文件的定义</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
  <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>声明文件的使用</p><ul><li><p>方式一：直接导入</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./type.d.ts&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> base<span class="token operator">:</span> Base <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  num<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二：在<code>tsconfig.json</code>中配置</p><p>类型声明文件也可以包括在项目的 tsconfig.json 文件里面，这样的话，编译器打包项目时，会自动将类型声明文件加入编译，而不必在每个脚本里面加载类型声明文件。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;type.d.ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ol><h2 id="_2、类型文件的来源方式" tabindex="-1"><a class="header-anchor" href="#_2、类型文件的来源方式" aria-hidden="true">#</a> 2、类型文件的来源方式</h2><ul><li>TypeScript 编译器自动生成。</li><li>TypeScript 内置类型文件。</li><li>外部模块的类型声明文件，需要自己安装。</li></ul><h3 id="自动生成" tabindex="-1"><a class="header-anchor" href="#自动生成" aria-hidden="true">#</a> 自动生成</h3><ul><li><p>配置<code>tsconfig.json</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过命令</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>tsc <span class="token operator">--</span>declaration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="内置声明文件" tabindex="-1"><a class="header-anchor" href="#内置声明文件" aria-hidden="true">#</a> 内置声明文件</h3><p>在安装<code>TS</code>的时候，就安装了一些内部声明好的文件。TypeScript 编译器会自动根据编译目标<code>target</code>的值，加载对应的内置声明文件，所以不需要特别的配置。但是，可以使用编译选项<code>lib</code>，指定加载哪些内置声明文件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;es2021&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外部类型声明文件" tabindex="-1"><a class="header-anchor" href="#外部类型声明文件" aria-hidden="true">#</a> 外部类型声明文件</h3><p>使用第三方库的时候，就需要这个库的声明文件。</p>`,13)),s("ol",null,[n[10]||(n[10]=s("li",null,[s("p",null,"这个库自带了声明文件，那么直接导入这个库的类型声明文件即可。")],-1)),s("li",null,[s("p",null,[n[1]||(n[1]=a("不带有声明文件，可以去",-1)),s("a",d,[n[0]||(n[0]=a("DefinitelyTyped 仓库",-1)),c(t)]),n[2]||(n[2]=a("中找，里面所有的类型库都放在了",-1)),n[3]||(n[3]=s("code",null,"@types",-1)),n[4]||(n[4]=a("命名空间下，如果这个类型声明文件的声明文件是",-1)),n[5]||(n[5]=s("code",null,"index.d.ts",-1)),n[6]||(n[6]=a("，那么安装库后不需要做任何操作即可，否则就要修改",-1)),n[7]||(n[7]=s("code",null,"tsconfig.json",-1)),n[8]||(n[8]=a("来改变指定文件。",-1))]),n[9]||(n[9]=e(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 修改自动加载 node_modules/@types ，改为tsconfig.json同级的typings和vendor/types子目录，加载类型模块</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./typings&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./vendor/types&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 默认情况下，TypeScript 会自动加载typeRoots目录里的所有模块，编译选项types可以指定加载哪些模块。</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;types&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))]),n[11]||(n[11]=e(`<li><p>完全没有声明文件，就需要自己手写了，如果不想写就可以将整个库的类型指定为<code>any</code>那么就不会报错了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token comment">// 或者</span>
<span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">JQuery</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> JQuery<span class="token punctuation">;</span>

<span class="token comment">// 或者</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;模块名&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))]),n[13]||(n[13]=e(`<h2 id="_3、declare" tabindex="-1"><a class="header-anchor" href="#_3、declare" aria-hidden="true">#</a> 3、declare</h2><p>类型声明文件中只有类型的声明，<code>declare</code>也只能声明类型，也不包含实现，所以在类型声明文件中就非常适合使用<code>declare</code>来描述类型。也可以声明一些全局公共的类型，或者变量类型，然后加入到<code>tsconfig.json</code>，在使用的时候就不用到处<code>import</code>或者定义了，也可以添加<code>export</code>进行导出。</p><p>例如：</p><ol><li><p>声明全局类型文件<code>global.d.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">interface</span> <span class="token class-name">IResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>tsconfig</code>配置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;global.d.ts&quot;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时就可以在任何地方不通导入就能使用这个类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> res<span class="token operator">:</span> IResult<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  code<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  msg<span class="token operator">:</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_4、三斜杆命令" tabindex="-1"><a class="header-anchor" href="#_4、三斜杆命令" aria-hidden="true">#</a> 4、三斜杆命令</h2><p>如果声明文件被拆分为了很多个文件，但是又需要统一入口，那么就可以通过三斜杆命令将其他的声明文件引入到一个文件中。</p><p>**注意：**三斜杆命令前面只能有其他三斜杆命令、单行注释或多行注释，否则三斜杆命令会被当做一个普通的注释。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;./types.d.ts&quot; /&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三斜杆命令的三种参数</p><ul><li>path</li><li>types</li><li>lib</li></ul><h3 id="reference-path" tabindex="-1"><a class="header-anchor" href="#reference-path" aria-hidden="true">#</a> <code>/// &lt;reference path=&quot;&quot; /&gt;</code></h3><p>编译器会在预处理阶段，找出所有三斜杠引用的文件，将其添加到编译列表中，然后一起编译。<code>path</code>参数指定了所引入文件的路径。如果该路径是一个相对路径，则基于当前脚本的路径进行计算。编译参数<code>noResolve</code>，则忽略三斜杠指令。将其当作一般的注释，原样保留在编译产物中。</p><p><strong>注意事项:</strong></p><ul><li><code>path</code>参数必须指向一个存在的文件，若文件不存在会报错。</li><li><code>path</code>参数不允许指向当前文件。</li></ul><ol><li><p><code>/// &lt;reference path=&quot;&quot; /&gt;</code>是最常见的三斜杠命令，告诉编译器在编译时需要包括的文件，常用来声明当前脚本依赖的类型文件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;./test.ts&quot; /&gt;</span>

<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例表示，当前脚本依赖于<code>./test.ts</code>，里面是<code>add()</code>的定义。编译当前脚本时，还会同时编译<code>./lib.ts</code>。编译产物会有两个 JS 文件，一个当前脚本，另一个就是<code>./test.js</code>。</p></li><li><p>当前脚本依赖于 其他 类型声明文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">URL</span> <span class="token keyword">from</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.typescriptlang.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="reference-types" tabindex="-1"><a class="header-anchor" href="#reference-types" aria-hidden="true">#</a> <code>/// &lt;reference types=&quot;&quot; /&gt;</code></h3><p>types 参数用来告诉编译器当前脚本依赖某个 DefinitelyTyped 类型库，通常安装在<code>node_modules/@types</code>目录。</p><p>types 参数的值是类型库的名称，也就是安装到<code>node_modules/@types</code>目录中的子目录的名字。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference types=&quot;node&quot; /&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，这个三斜杠命令表示编译时添加 Node.js 的类型库，实际添加的脚本是<code>node_modules</code>目录里面的<code>@types/node/index.d.ts</code>。</p><p>可以看到，这个命令的作用类似于<code>import</code>命令。</p><p>注意，这个命令只在你自己手写类型声明文件（<code>.d.ts</code>文件）时，才有必要用到，也就是说，只应该用在<code>.d.ts</code>文件中，普通的<code>.ts</code>脚本文件不需要写这个命令。如果是普通的<code>.ts</code>脚本，可以使用<code>tsconfig.json</code>文件的<code>types</code>属性指定依赖的类型库。</p><h3 id="reference-lib" tabindex="-1"><a class="header-anchor" href="#reference-lib" aria-hidden="true">#</a> <code>/// &lt;reference lib=&quot;&quot; /&gt;</code></h3><p><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code>命令允许脚本文件显式包含内置 lib 库，等同于在<code>tsconfig.json</code>文件里面使用<code>lib</code>属性指定 lib 库。</p><p>前文说过，安装 TypeScript 软件包时，会同时安装一些内置的类型声明文件，即内置的 lib 库。这些库文件位于 TypeScript 安装目录的<code>lib</code>文件夹中，它们描述了 JavaScript 语言和引擎的标准 API。</p><p>库文件并不是固定的，会随着 TypeScript 版本的升级而更新。库文件统一使用“lib.[description].d.ts”的命名方式，而<code>/// &lt;reference lib=&quot;&quot; /&gt;</code>里面的<code>lib</code>属性的值就是库文件名的<code>description</code>部分，比如<code>lib=&quot;es2015&quot;</code>就表示加载库文件<code>lib.es2015.d.ts</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/// &lt;reference lib=&quot;es2017.string&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，<code>es2017.string</code>对应的库文件就是<code>lib.es2017.string.d.ts</code>。</p>`,28))])}const m=p(r,[["render",u],["__file","declaration.html.vue"]]);export{m as default};
