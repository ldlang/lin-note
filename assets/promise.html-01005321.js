import{_ as s,o as a,c as e,e as t}from"./app-70f1c539.js";const p={};function o(c,n){return a(),e("div",null,[...n[0]||(n[0]=[t(`<h1 id="期约-promise-与异步函数" tabindex="-1"><a class="header-anchor" href="#期约-promise-与异步函数" aria-hidden="true">#</a> 期约(Promise)与异步函数</h1><ol><li><p><strong>Promise</strong></p><ul><li><p>promise 有三种状态分别是，<code>padding</code>进行中，<code>resolved</code>已完成，<code>rejected</code>已失败</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>进行中
	<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

已成功
	<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;成功了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	等同于	Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;成功了&#39;</span><span class="token punctuation">)</span>

已失败
	<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;失败了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	等同于 Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;失败了&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>primose 的状态只能改变一次，第一次改变的状态就是这个 promise 的最终态了，之后无论 再怎么去改变他的状态都是不行的。</p></li><li><p><code>Promise.reject()</code>抛出的错误是不会被<code>try</code>捕获的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;失败了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会走到这里</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>330 页之后继续</p></li></ul></li><li></li></ol>`,2)])])}const l=s(p,[["render",o],["__file","promise.html.vue"]]);export{l as default};
