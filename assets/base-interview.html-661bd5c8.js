import{_ as e,o as i,c as l,e as a}from"./app-70f1c539.js";const r={};function t(n,p){return i(),l("div",null,[...p[0]||(p[0]=[a('<h1 id="基础知识篇" tabindex="-1"><a class="header-anchor" href="#基础知识篇" aria-hidden="true">#</a> 基础知识篇</h1><h2 id="_1、一个页面从输入-url-到显示的流程" tabindex="-1"><a class="header-anchor" href="#_1、一个页面从输入-url-到显示的流程" aria-hidden="true">#</a> 1、一个页面从输入 url 到显示的流程</h2><ol><li><p>解析 url：</p><p>浏览器会先解析 url 中的域名地址，然后会将其转换为对应的 ip 地址，他会先查询本地的 DNS 缓存，如果没有则向 DNS 服务器发起请求；</p></li><li><p>建立连接：</p><p>浏览器使用 HTTP 协议向服务器进行通信，建立 TCP 连接（通过三次握手确认连接的建立）；</p></li><li><p>发起 HTTP 请求：</p><p>浏览器向服务器发送 HTTP 请求，请求资源；</p></li><li><p>服务器处理请求：</p><p>Web 服务器接收到浏览器发送的 HTTP 请求后，会根据请求的内容进行处理。这可能涉及到查询数据库、读取文件等操作。</p></li><li><p>服务器响应：</p><p>Web 服务器根据请求的处理结果生成 HTTP 响应，并将其发送回浏览器。响应中包含了状态码、响应头（包含内容类型、缓存策略等信息）以及响应体（包含 HTML、CSS、JavaScript 等页面内容）。</p></li><li><p>下载页面资源：</p><p>浏览器收到服务器的形响应后，会解析响应头，确定响应的内容类型。如果是 HTML 页面，浏览器会开始下载页面中引用的其他资源，如 CSS 文件、JavaScript 文件、图片等。</p></li><li><p>页面渲染：</p><p>浏览器根据解析的 HTML 文档构建 DOM 树，解析 CSS 样式表生成渲染树，并执行 JavaScript 脚本，最终将页面渲染到浏览器窗口中。</p></li><li><p>页面显示：</p><p>浏览器将渲染好的页面显示在屏幕上。</p></li></ol>',3)])])}const o=e(r,[["render",t],["__file","base-interview.html.vue"]]);export{o as default};
