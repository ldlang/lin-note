import{_ as a,o as e,c as s,e as l}from"./app-70f1c539.js";const r={};function o(i,n){return e(),s("div",null,[...n[0]||(n[0]=[l(`<h1 id="错误处理与调试" tabindex="-1"><a class="header-anchor" href="#错误处理与调试" aria-hidden="true">#</a> 错误处理与调试</h1><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h2><h3 id="try-catch-语句" tabindex="-1"><a class="header-anchor" href="#try-catch-语句" aria-hidden="true">#</a> try/catch 语句</h3><p>所有可能会出错的代码都应该放置于 try/catch 语句中，catch 接收的一个参数，是捕获到的 try 中抛出的错误，如果没有错误则不会走到 catch 中，在上面全都执行完毕后则会执行 finally。如果同时在 3 个地方 return，那么只有 finally 的 return 才是有效的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 抛出错误，确保能走到catch</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抛出错误" tabindex="-1"><a class="header-anchor" href="#抛出错误" aria-hidden="true">#</a> 抛出错误</h3><p>通过 throw 抛出错误后，代码会被立即中断执行，除非使用 try/catch 捕获了他的错误。</p><p>错误类型：</p><ul><li>Error：错误的基本类型，所有的错误都是继承该类型</li><li>InternalError：递归过多，栈移除，也就是死循环。</li><li>EvalError：使用 eval()函数发生异常时抛出。</li><li>RangeError：错误会在数值越界时抛出。例如，定义数组时如果设置了并不支持的长度。</li><li>ReferenceError：会在找不到对象时发生。这种错误经常是由访问不存在的变量而导致的。</li><li>SyntaxError：经常在给 eval()传入的字符串包含 JavaScript 语法错误时发生。</li><li>TypeError：主要发生在变量不是预期类型，或者访问不存在的方法时。</li><li>URIError：只会在使用 encodeURI()或 decodeURI()但传入了格式错误的 URI 时发生。</li></ul><p>抛出指定类型的错误：</p><ul><li><p>throw new Error(&quot;错误&quot;);</p></li><li><p>throw new SyntaxError(&quot;错误&quot;);</p></li><li><p>throw new InternalError(&quot;错误&quot;);</p></li><li><p>throw new TypeError(&quot;错误&quot;);</p></li><li><p>throw new RangeError(&quot;错误&quot;);</p></li><li><p>throw new EvalError(&quot;错误&quot;);</p></li><li><p>throw new URIError(&quot;错误&quot;);</p></li><li><p>throw new ReferenceError(&quot;错误&quot;);</p></li></ul><h2 id="调试技术" tabindex="-1"><a class="header-anchor" href="#调试技术" aria-hidden="true">#</a> 调试技术</h2><h3 id="把消息打印到控制台" tabindex="-1"><a class="header-anchor" href="#把消息打印到控制台" aria-hidden="true">#</a> 把消息打印到控制台</h3><p>console 对象上面有很多的方法，一些方法可以把消息打印到控制台。</p><p>常用的打印消息方式：</p><ul><li>console.log()：在控制台中记录错误消息</li><li>console.error()：在控制台中记录信息性内容</li><li>console.warn()：在控制台记录常规消息</li><li>console.info()：在控制台中记录警告消息</li></ul><p>不常用的：可以通过 console.log(console)打印所有的方法</p><ul><li><p>console.dir()</p></li><li><p>console.table()</p></li><li><p>console.assert()</p></li><li><p>console.clear()</p></li><li><p>console.count()</p></li><li><p>console.time()</p></li><li><p>console.timeEnd()</p></li><li><p>console.group()</p></li><li><p>console.groupEnd()</p></li><li><p>console.groupCollapsed()</p></li><li><p>console.trace()</p></li><li><p>console.debug()</p><p>......</p></li></ul><p>注意：相比于使用警告框，打印日志消息是更好的调试方法。这是因为警告框会阻塞代码 执行，从而影响对异步操作的计时，进而影响代码的结果。</p>`,19)])])}const p=a(r,[["render",o],["__file","err-and-debug.html.vue"]]);export{p as default};
