import{_ as s,o as a,c as e,e as p}from"./app-70f1c539.js";const t={};function o(c,n){return a(),e("div",null,[...n[0]||(n[0]=[p(`<h1 id="declare" tabindex="-1"><a class="header-anchor" href="#declare" aria-hidden="true">#</a> declare</h1><h2 id="_1、基础说明" tabindex="-1"><a class="header-anchor" href="#_1、基础说明" aria-hidden="true">#</a> 1、基础说明</h2><p>一般用于描述已经存在外部函数的类型，这个外部函数没有类型说明，编译器无法识别，使用<code>declare</code>给他加上说明。<code>declare</code>的重要特点是，它只是通知编译器某个类型是存在的，不用给出具体实现。<strong>declare 只能用来描述已经存在的变量和数据结构，不能用来声明新的变量和数据结构</strong>。另外，所有 declare 语句都不会出现在编译后的文件里面。</p><p><code>declare</code>可以描述的类型</p><ul><li>变量（const、let、var 命令声明）</li><li>type 或者 interface 命令声明的类型</li><li>class</li><li>enum</li><li>函数（function）</li><li>模块（module）</li><li>命名空间（namespace）</li></ul><h2 id="_2、variable-变量" tabindex="-1"><a class="header-anchor" href="#_2、variable-变量" aria-hidden="true">#</a> 2、variable（变量）</h2><p>使用<code>declare</code>描述已有的变量，因为这个变量是已经存在的了，所以后续还要定义同名变量是不被<code>TS</code>允许的。</p><ul><li><p>描述一个已有的变量<code>num</code>，如果没有指定类型，那么<code>num</code>就是<code>any</code>，在描述类型的时候是无法指定具体的<strong>值</strong>的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>num</code>变量被声明，所以只能使用这个变量，而不能再次重复定义这个变量</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 正确</span>
num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">//报错 ，无法重新声明块范围变量“num”</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3、funciton" tabindex="-1"><a class="header-anchor" href="#_3、funciton" aria-hidden="true">#</a> 3、funciton</h2><p>使用<code>declare</code>描述已有的函数，因为这个函数是已经存在的了，所以后续还要定义同名变量是不被<code>TS</code>允许的，可以直接只用这个函数。</p><ul><li><p>描述一个已有的函数<code>fun</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用<code>fun</code>函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 正确</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 报错，无法重新声明块范围变量“fun”</span>
<span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4、class" tabindex="-1"><a class="header-anchor" href="#_4、class" aria-hidden="true">#</a> 4、class</h2><ul><li><p>描述一个已有的<code>class</code> <code>Person</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>Person</code>这个<code>class</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_5、module、namespace" tabindex="-1"><a class="header-anchor" href="#_5、module、namespace" aria-hidden="true">#</a> 5、module、namespace</h2><p>如果要把变量、函数等描述在一起，就可以使用<code>module</code>和<code>namespace</code>，<code>module</code>后接的是导入的<strong>地址</strong>。</p><h3 id="描述-module-和-namespace" tabindex="-1"><a class="header-anchor" href="#描述-module-和-namespace" aria-hidden="true">#</a> 描述 module 和 namespace</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token constant">NS</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token constant">M</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="namespace-描述外部库" tabindex="-1"><a class="header-anchor" href="#namespace-描述外部库" aria-hidden="true">#</a> namespace 描述外部库</h3><p>如果一个<code>lib</code>库有一个<code>fun</code>的方法和<code>num</code>的变量，使用<code>namespace</code>就可以这样描述着库中的这些属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">namespace</span> lib <span class="token punctuation">{</span>
  <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="module-给外部库增加属性方法" tabindex="-1"><a class="header-anchor" href="#module-给外部库增加属性方法" aria-hidden="true">#</a> module 给外部库增加属性方法</h3><p>在<code>TS</code>中如果一个库已有了类型声明，想再往它身上添加属性等，是不被允许的，此时就可以使用<code>declare module</code>给这个外部库增加属性等。</p><ol><li><p>增加属性方法</p><ul><li><p>模拟<code>lib</code>库</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ILib</span> <span class="token punctuation">{</span>
  <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> lib<span class="token operator">:</span> ILib <span class="token operator">=</span> <span class="token punctuation">{</span>
  fun<span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在使用它的地方，对其进行扩展属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> lib <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./lib&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 报错 ，类型“ILib”上不存在属性“str”</span>
lib<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 扩展了str属性后，上面赋值str属性就不会报错了</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;./lib&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">ILib</span> <span class="token punctuation">{</span>
    str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>对已有类型定义进行扩展。</p><ul><li><p>已有类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ILib</span> <span class="token punctuation">{</span>
  <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>扩展类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ILib <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./lib&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;./lib&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">ILib</span> <span class="token punctuation">{</span>
    str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 必须满足类型扩展后的样子</span>
<span class="token keyword">const</span> lib<span class="token operator">:</span> ILib <span class="token operator">=</span> <span class="token punctuation">{</span>
  num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  str<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h3><ol><li><p><code>declare module NAME</code>语法里面的模块名<code>NAME</code>，跟 import 和 export 的模块名规则是一样的，且必须跟当前文件加载该模块的语句写法保持一致。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 导入axios</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// module的书写方式</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;axiso&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// lib 库导入</span>
<span class="token keyword">import</span> lib <span class="token keyword">from</span> <span class="token string">&quot;./lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// module的书写方式</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;./lib&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不能创建新的顶层类型。也就是说，只能对<strong>已有</strong>的模块中<strong>已经存在</strong>的类型进行扩展，不允许增加新的顶层类型。</p></li><li><p>不能对默认的<code>default</code>接口进行扩展，只能对 export 命令输出的命名接口进行扩充。这是因为在进行类型扩展时，需要依赖输出的接口名。</p></li></ol></li></ol><h3 id="可以使用通配符" tabindex="-1"><a class="header-anchor" href="#可以使用通配符" aria-hidden="true">#</a> 可以使用通配符</h3><p>declare module 描述的模块名可以使用通配符。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;my-plugin-*&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">PluginOptions</span> <span class="token punctuation">{</span>
    enabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    priority<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span>options<span class="token operator">:</span> PluginOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token operator">=</span> initialize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，模块名<code>my-plugin-*</code>表示适配所有以<code>my-plugin-</code>开头的模块名（比如<code>my-plugin-logger</code>）。</p><h3 id="例子-扩展-vuerouter" tabindex="-1"><a class="header-anchor" href="#例子-扩展-vuerouter" aria-hidden="true">#</a> 例子，扩展 vueRouter</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> IMenuList<span class="token punctuation">,</span> IMenuItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/api&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">interface</span> <span class="token class-name">IRouterUtils</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * 链接路由格式化
   * @param menuList 菜单列表
   */</span>
  <span class="token function">linkRouteFormat</span><span class="token punctuation">(</span>menuList<span class="token operator">:</span> IMenuItem<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * 格式化路由
   * @param menuList 菜单列表
   * @params isRecursion 是否递归
   */</span>
  <span class="token function">formatRoutes</span><span class="token punctuation">(</span>routes<span class="token operator">:</span> IMenuList<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;vue-router&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Router</span> <span class="token punctuation">{</span>
    routerUtils<span class="token operator">:</span> IRouterUtils<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、global" tabindex="-1"><a class="header-anchor" href="#_6、global" aria-hidden="true">#</a> 6、global</h2><p>如果要为<code>js</code>原生对象上扩展方法，就要借助<code>declare global</code>。</p><ul><li><p>往<code>String</code>上扩展属性，方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>往<code>Window</code>上扩展方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>
    <span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function-variable function">toNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_7、enum" tabindex="-1"><a class="header-anchor" href="#_7、enum" aria-hidden="true">#</a> 7、enum</h2><p>所有正确的<code>enum</code>都可以加上<code>declare</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">enum</span> <span class="token constant">E1</span> <span class="token punctuation">{</span>
  <span class="token constant">A</span><span class="token punctuation">,</span>
  <span class="token constant">B</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">enum</span> <span class="token constant">E2</span> <span class="token punctuation">{</span>
  <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token constant">B</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> <span class="token constant">E3</span> <span class="token punctuation">{</span>
  <span class="token constant">A</span><span class="token punctuation">,</span>
  <span class="token constant">B</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> <span class="token constant">E4</span> <span class="token punctuation">{</span>
  <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token constant">B</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、declare-module-用于类型声明文件" tabindex="-1"><a class="header-anchor" href="#_8、declare-module-用于类型声明文件" aria-hidden="true">#</a> 8、declare module 用于类型声明文件</h2><p>我们可以为每个模块脚本，定义一个<code>.d.ts</code>文件，把该脚本用到的类型定义都放在这个文件里面。但是，更方便的做法是为整个项目，定义一个大的<code>.d.ts</code>文件，在这个文件里面使用<code>declare module</code>定义每个模块脚本的类型。</p>`,37)])])}const l=s(t,[["render",o],["__file","declare.html.vue"]]);export{l as default};
