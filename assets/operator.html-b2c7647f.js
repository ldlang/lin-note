import{_ as d,o as a,c as s,e}from"./app-70f1c539.js";const n={};function r(l,t){return a(),s("div",null,[...t[0]||(t[0]=[e(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h1><h2 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>正常数字运算： 10 + 10 = 20<br>数字 + 字符串： 10 + &#39;10&#39; = 20 (在 js 中则是 1010)<br>整数 + 浮点数（小数）: 10 + 0.20 = 10.20 有几位小数得到就是几位小数<br>整数 + null: 10 + null = null 任何数与 null 运算都为 null</td></tr><tr><td>-</td><td>与加号表现一致</td></tr><tr><td>*</td><td>与加号表现一致</td></tr><tr><td>/ 或 div</td><td>任何两个数相处，结果都是浮点数<br>如果除数是 0，那么结果是 null<br>其余的与加号表现一致</td></tr><tr><td>% 或 mod</td><td>取模，模结果的正负与被模的一致</td></tr></tbody></table><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>比较运算符用来对表达式左右两边的操作数进行比较，结果为真返回 1，结果为假返回 0，其他情况返回 0</p><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>=</td><td>等于运算符</td><td>判断两个值、字符换或者表达式是否相等</td></tr><tr><td>&lt;=&gt;</td><td>安全等于运算符</td><td>安全判断两个值、字符换或者表达式是否相等，专为 NULL 而生</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于运算符</td><td>判断两个是是否不相等</td></tr><tr><td>&lt;</td><td>小于运算符</td><td>判断前面的值、字符换或者表达式是否小于后面的值、字符换或者表达式</td></tr><tr><td>&gt;</td><td>大于运算符</td><td>...</td></tr><tr><td>&lt;=</td><td>小于等于运算符</td><td>...</td></tr><tr><td>=&gt;</td><td>大于等于运算符</td><td>...</td></tr></tbody></table><p>注意：</p><ol><li>字符串和数字进行比较时，字符串会隐式转换为数字，如果不是数字的字符串则转为 0。</li><li>字符串比较时，会比较他们的 ANSI。</li><li>只要有 NULL 参与运算结果就是 NULL，除了使用<code>&lt;=&gt;</code>进行条件查询。条件查询的时候如果有 <code>值 = NULL</code>的情况，那么结果为空，因为这样的条件查询的时候，只有比较结果是<code>1</code>的才会被查询回来，NULL 参与运算都是 NULL 所以什么都查不回来。</li><li>如果使用<code>&lt;=&gt;</code>运算时，如果又一边是 NULL，那么结果为 0，如果两边都是 NULL 那么结果为 1</li></ol><h2 id="关键字比较运算符" tabindex="-1"><a class="header-anchor" href="#关键字比较运算符" aria-hidden="true">#</a> 关键字比较运算符</h2><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>IS NULL</td><td>为空运算符</td><td>判断是不是为空值（NULL）</td><td>SELECT 字段 FROM 表名 WHERE 字段 IS NULL;</td></tr><tr><td>IS NOT NULL</td><td>不为空运算符</td><td>判断是不是不为空值（NULL）</td><td>SELECT 字段 FROM 表名 WHERE 字段 IS NOT NULL;</td></tr><tr><td>LEAST</td><td>最小值运算符</td><td>在多个值中返回最小值</td><td>SELECT LEAST(字段,字段) FROM 表名;</td></tr><tr><td>GREATEST</td><td>最大值运算符</td><td>在多个值中返回最大值</td><td>SELECT GREATEST(字段,字段) FROM 表名;</td></tr><tr><td>BETWEEN...AND...</td><td>两值之间的运算符</td><td>判断一个值是不是在两个条件之间，结果包含这两个条件</td><td>SELECT 字段 FROM 表名 WHERE 字段 BETWEEN 条件 1 AND 条件 2;</td></tr><tr><td>ISNULL</td><td>为空运算符</td><td>判断是不是为空值（NULL）</td><td>SELECT 字段 FROM 表名 WHERE ISNULL(字段);</td></tr><tr><td>IN</td><td>属于运算符</td><td>判断一个值是否为列表中的任意一个值，也就是 IN 后面枚举了一些值，查询的值是不是等于后面枚举的值</td><td>SELECT 字段 FROM 表名 WHERE 字段 IN (枚举值 1，枚举值 2);</td></tr><tr><td>NOT IN</td><td>不属于运算符</td><td>判断一个值是否不是列表中的任意一个值。也就是 NOTIN 后面枚举了一些值，查询的值是不是<code>不</code>等于后面枚举的值</td><td>SELECT 字段 FROM 表名 WHERE 字段 NOT IN (枚举值 1，枚举值 2);</td></tr><tr><td>LIKE</td><td>模糊匹配运算符</td><td>判断一个值是否负荷而模糊匹配的规则</td><td>SELECT 字段 FROM 表名 WHERE 字段 LIKE &#39;_a%&#39;;</td></tr><tr><td>REGEXP</td><td>正则表达式运算符</td><td>判断一个值是否符合正则的条件</td><td>感兴趣再补充</td></tr><tr><td>PLIKE</td><td>正则表达式元素符</td><td>判断一个值是否符合正则的条件</td><td>感兴趣再补充</td></tr></tbody></table><p>LIKE 使用说明：</p><ol><li><p><code>%</code>表示不确定的字符数，<code>_</code>表示一个字符。</p></li><li><p>要查询包含 a 的字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%a%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>要查询第二个字段为 a 的字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 使用一个 _ 去占位</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;_a%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询同时包含 a 和 b 的字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 这样虽然能够查到同时包含 a 和 b 的字段，但是这样只能查到 a 在前 b 在后的。</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%a%b%&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 正确的做法</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%a%b%&#39;</span> <span class="token operator">||</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%b%a%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询以 _ 开头的字段，使用 \\ 进行转义，使 _ 不再代表一个字符，而是他本身的样子。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;\\_%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>NOT 或 !</td><td>逻辑非</td></tr><tr><td>AND 或 &amp;&amp;</td><td>逻辑与</td></tr><tr><td>OR 或 ||</td><td>逻辑或</td></tr><tr><td>XOR</td><td>逻辑异或，就是必须一边为真另一边为假</td></tr></tbody></table><p>优先级：OR 和 AND 可以一起使用，但是 AND 的优先级要高于 OR。</p>`,15)])])}const p=d(n,[["render",r],["__file","operator.html.vue"]]);export{p as default};
