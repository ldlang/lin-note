import{_ as s,o as a,c as t,e as p}from"./app-70f1c539.js";const e={};function o(c,n){return a(),t("div",null,[...n[0]||(n[0]=[p(`<h3 id="jwt认证机制" tabindex="-1"><a class="header-anchor" href="#jwt认证机制" aria-hidden="true">#</a> jwt认证机制</h3><ol><li><p>jwt</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jwt是跨域认证的解决方案
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>jwt的组成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jwt由三部分组成，分别是Header、payload、signature，三者之间通过 . 分割，真正的用户信息存储在payload部分，其他部分是为了jwt安全性的，为了保证token的安全性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>jwt的使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>客户端收到服务器返回的jwt之后，一般会进行持久化的存储，伺候，客户端每次与服务器通信，都要带上这个jwt的字符串，去进行身份的验证，jwt推荐的使用方式，将jwt的token放在http的请求头上的Authorization中

格式
	<span class="token literal-property property">Authorization</span><span class="token operator">:</span> Bearer token  <span class="token comment">// Bearer后面空格再接上token</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i jsonwebtoken   <span class="token comment">// 用于生成jwt字符串</span>
npm i express<span class="token operator">-</span>jwt	<span class="token comment">// 用于将jwt字符串解析还原为json对象</span>

导入包
	<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> expressJwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express-jwt&#39;</span><span class="token punctuation">)</span>

定义jwt秘钥
	<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&#39;lindalang&#39;</span>

定义全局解析秘钥的中间件，解析完成后会往req身上挂载一个auth属性，这个属性就包涵了解析后的数据信息，express<span class="token operator">-</span>jwt需要配置algorithms算法，一般默认是<span class="token constant">HS256</span>。
	app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>expressJwt<span class="token punctuation">.</span><span class="token function">expressjwt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> secretKey<span class="token punctuation">,</span> <span class="token literal-property property">algorithms</span><span class="token operator">:</span>						<span class="token punctuation">[</span><span class="token string">&quot;HS256&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">//unless过滤不需要解析的接口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>secret秘钥</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>为了保证jwt字符串的安全性，防止jwt字符串在传输过程中被破解，需要定义一个用于加密和解密的secret秘钥
	<span class="token number">1.</span>生成jwt字符串的时候，需要使用secret秘钥最用户的信息进行加密，最终得到加密好的jwt字符串
    <span class="token number">2.</span>当jwt字符串解析还原为json对象的时候，需要用secret进行解密
    
secret其实就是一个随意书写的字符串
<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&#39;woshijiamizifuchuan&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在登录成功后生成jwt</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">调用jsonwebtoken包提供的sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，将用户的信息加密成jwt字符串，响应给客户端

<span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>接收三个参数，分别是用户信息，加密字符串，和配置对象，加密的东西，最好不要包好用户的密码
<span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">&#39;60s&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将jwt的token字符串<code>还原</code>为json对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>使用express<span class="token operator">-</span>jwt这个中间件，自动将客户端发送过来的token解析还原

<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&#39;lindalang&#39;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>expressJwt<span class="token punctuation">.</span><span class="token function">expressjwt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> secretKey<span class="token punctuation">,</span> <span class="token literal-property property">algorithms</span><span class="token operator">:</span> 		<span class="token punctuation">[</span><span class="token string">&quot;HS256&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

此时所有请求的req身上都有了一个auth属性，这个属性里面就包涵了解析后的信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>处理jwt解析错误</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jwt解析错误err<span class="token punctuation">.</span>name就会有一个<span class="token string">&#39;UnauthorizedError&#39;</span>属性，所以只需要看有没有这个属性就知道是不是token解析错误了

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;UnauthorizedError&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;token 解析错误&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;token过期&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;未知错误&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>完整示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 导入跨域模块</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 导入jwt模块</span>
<span class="token keyword">const</span> expressJwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express-jwt&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 导入express解析jwt的模块</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 挂载跨域模块，一定要在所有路由的前面</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/public&#39;</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 挂载全局静态资源的模块</span>
<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&#39;lindalang&#39;</span>  <span class="token comment">// 定义jwt的加密解密字符串</span>

<span class="token comment">// 解析jwt的全局中间件，unless里可以配置要忽略解析的接口</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>expressJwt<span class="token punctuation">.</span><span class="token function">expressjwt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> secretKey<span class="token punctuation">,</span> <span class="token literal-property property">algorithms</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;HS256&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 登录以后返回用户token给客户端</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">&#39;60s&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
        token <span class="token comment">// 将token发送给客户端</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 登录成功，通过携带的token解析用户的信息</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>auth<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>auth<span class="token punctuation">)</span> <span class="token comment">// 获取通过express-jwt解析后的用户信息</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 错误处理</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 如果err.name有&#39;UnauthorizedError&#39;这个属性，则代表是token解析错误导致的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;UnauthorizedError&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;token 解析错误&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;token过期&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;未知错误&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器启动成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h1 id="前端使用" tabindex="-1"><a class="header-anchor" href="#前端使用" aria-hidden="true">#</a> 前端使用</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 登录获取token</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token <span class="token operator">&amp;&amp;</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token comment">// 持久化存储token</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 将token携带给服务端</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 配置token传给服务端</span>
    <span class="token string-property property">&#39;Authorization&#39;</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户接口&#39;</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)])])}const l=s(e,[["render",o],["__file","jwt(token)的使用.html.vue"]]);export{l as default};
