import{_ as n,o as t,c as a,e}from"./app-70f1c539.js";const d={};function p(o,s){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或 INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON 类型</td><td>JSON 对象、JSON 数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON；<br>集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><blockquote><p>1 - 4 为数字类型</p><p>5 为日期类型</p><p>6 - 10 为字符串类型</p></blockquote><p>常见数据类型的属性，如下：</p><table><thead><tr><th>MySQL 关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含 NULL 值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含 NULL 值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号（不能为负数）</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr><tr><td>ZERO_FILL</td><td>0填充，不足的位数使用0来填充</td></tr></tbody></table><h2 id="设置字符集" tabindex="-1"><a class="header-anchor" href="#设置字符集" aria-hidden="true">#</a> 设置字符集</h2><p>如果字段没有设置字符集会往上找表的字符集，如果表没有设置则会找库的字符集，依次往上找，一般只需要设置一个数据的字符集即可。</p><h3 id="_1、设置数据库的字符集" tabindex="-1"><a class="header-anchor" href="#_1、设置数据库的字符集" aria-hidden="true">#</a> 1、设置数据库的字符集</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建<strong>dbtest</strong>数据并指定字符集为<strong>utf8</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> dbtest <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看数据库的创建语句、字符集等</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> dbtest<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、设置表的字符集" tabindex="-1"><a class="header-anchor" href="#_2、设置表的字符集" aria-hidden="true">#</a> 2、设置表的字符集</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">(</span>
	id <span class="token keyword">INT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建<strong>emp</strong>表并指定字符集为<strong>utf8</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp <span class="token punctuation">(</span>
	id <span class="token keyword">INT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">&#39;utf8&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看表的创建语句、字符集等</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、设置字段的字符集" tabindex="-1"><a class="header-anchor" href="#_3、设置字段的字符集" aria-hidden="true">#</a> 3、设置字段的字符集</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">(</span>
	id <span class="token keyword">INT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建<strong>test</strong>表，并指定<strong>name</strong>字段的字符集为<strong>utf8mb4</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span>
	id <span class="token keyword">INT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">&#39;utf8mb4&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">&#39;utf8&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整数类型-整型" tabindex="-1"><a class="header-anchor" href="#整数类型-整型" aria-hidden="true">#</a> 整数类型（整型）</h2><h3 id="_1、类型分类" tabindex="-1"><a class="header-anchor" href="#_1、类型分类" aria-hidden="true">#</a> 1、类型分类</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p><table><thead><tr><th><strong>整数类型</strong></th><th><strong>字节</strong></th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h3 id="_2、可选属性" tabindex="-1"><a class="header-anchor" href="#_2、可选属性" aria-hidden="true">#</a> 2、可选属性</h3><ol><li><p><strong>M</strong></p><p><code>M</code>: 表示显示宽度，M 的取值范围是(0, 255)。例如，int(5)：当数据宽度小于 5 位的时候在数字前面需要用字符填满宽度。该项功能需要配合“<code>ZEROFILL</code>”使用，表示用“0”填满宽度，否则指定显示宽度无效。</p><p>那么插入的数据宽度超过显示宽度限制不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即<code>显示宽度与类型可以存储的值范围无关</code>。<strong>从 MySQL 8.0.17 开始，整数数据类型不推荐使用显示宽度属性。</strong></p></li><li><p><strong>UNSIGNED</strong> （无符号）</p><p>UNSIGNED\`: 无符号类型（非负），所有的整数类型都有一个可选的属性 UNSIGNED（无符号属性），无符号整数类型的最小取值为 0。所以，如果需要在 MySQL 数据库中保存非负整数值时，可以将整数类型设置为无符号类型。</p></li><li><p><strong>ZEROFILL</strong></p><p><code>ZEROFILL</code>: 0 填充,（如果某列是 ZEROFILL，那么 MySQL 会自动为当前列添加 UNSIGNED 属性），如果指定了 ZEROFILL 只是表示不够 M 位时，用 0 在左边填充，如果超过 M 位，只要不超过数据存储范围即可。</p><p>原来，在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。 int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。也就是说，**int(M)，必须和 UNSIGNED ZEROFILL 一起使用才有意义。**如果整数值超过 M 位，就按照实际位数存储。只是无须再用字符 0 进行填充。</p></li></ol><h2 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h2><h3 id="_1、类型分类-1" tabindex="-1"><a class="header-anchor" href="#_1、类型分类-1" aria-hidden="true">#</a> 1、类型分类</h3><table><thead><tr><th>类型</th><th>名称</th><th>取值范围</th><th>占用字节数</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>-3.4E38~3.4E38</td><td>4</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>-1.7E308~1.7E308</td><td>8</td></tr></tbody></table><p>REAL 默认就是 DOUBLE。如果你把 SQL 模式设定为启用“<code>REAL_AS_FLOAT</code>”，那 么，MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> sql_mode <span class="token operator">=</span> “REAL_AS_FLOAT”<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>FLOAT 和 DOUBLE 这两种数据类型的区别</p><p>FLOAT 占用字节数少，取值范围小；DOUBLE 占用字节数多，取值范围也大。</p></li><li><p>浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半</p><p>MySQL 存储浮点数的格式为：<code>符号(S)</code>、<code>尾数(M)</code>和 <code>阶码(E)</code>。因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p></li></ul><h3 id="_2、-数据精度说明" tabindex="-1"><a class="header-anchor" href="#_2、-数据精度说明" aria-hidden="true">#</a> 2、 数据精度说明</h3><p>对于浮点类型，在 MySQL 中单精度值使用<code>4</code>个字节，双精度值使用<code>8</code>个字节。</p><ul><li><p>MySQL 允许使用<code>非标准语法</code>（其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么用）：<code>FLOAT(M,D)</code>或<code>DOUBLE(M,D)</code>。这里，M 称为<code>精度</code>，D 称为<code>标度</code>。(M,D)中 M=整数位+小数位，D=小数位。 D&lt;=M&lt;=255，0&lt;=D&lt;=30。</p><p>例如，定义为 FLOAT(5,2)的一个列可以显示为-999.99-999.99。如果超过这个范围会报错。</p></li><li><p>FLOAT 和 DOUBLE 类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示。</p></li><li><p>说明：浮点类型，也可以加<code>UNSIGNED</code>，但是不会改变数据范围，例如：FLOAT(3,2) UNSIGNED 仍然只能表示 0-9.99 的范围。</p></li><li><p>不管是否显式设置了精度(M,D)，这里 MySQL 的处理方案如下：</p><ul><li>如果存储时，整数部分超出了范围，MySQL 就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，就分以下情况： <ul><li>若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余的小数位后保存。例如在 FLOAT(5,2)列内插入 999.009，近似结果是 999.01。</li><li>若四舍五入后，整数部分超出范围，则 MySQL 报错，并拒绝处理。如 FLOAT(5,2)列内插入 999.995 和-999.995 都会报错。</li></ul></li></ul></li><li><p><strong>从 MySQL 8.0.17 开始，FLOAT(M,D) 和 DOUBLE(M,D)用法在官方文档中已经明确不推荐使用</strong>，将来可能被移除。另外，关于浮点型 FLOAT 和 DOUBLE 的 UNSIGNED 也不推荐使用了，将来也可能被移除。</p></li></ul><h3 id="_3、精度误差说明" tabindex="-1"><a class="header-anchor" href="#_3、精度误差说明" aria-hidden="true">#</a> 3、精度误差说明</h3><p>浮点数类型有个缺陷，和 js 一样存在误差，原因是：</p><blockquote><p>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成 1.001101×2^3。如果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。</p></blockquote><h2 id="定点数类型" tabindex="-1"><a class="header-anchor" href="#定点数类型" aria-hidden="true">#</a> 定点数类型</h2><h3 id="_1、类型分类-2" tabindex="-1"><a class="header-anchor" href="#_1、类型分类-2" aria-hidden="true">#</a> 1、类型分类</h3><ul><li><p>MySQL 中的定点数类型只有 DECIMAL 一种类型。</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2 字节</td><td>有效范围由 M 和 D 决定</td></tr></tbody></table><p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中，M 被称为精度，D 被称为标度。0&lt;=M&lt;=65，0&lt;=D&lt;=30，D&lt;M。例如，定义 DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p></li></ul><ul><li>DECIMAL(M,D)的最大取值范围与 DOUBLE 类型一样**，但是有效的数据范围是由 M 和 D 决定的。DECIMAL 的存储空间并不是固定的，由精度值 M 决定，总共占用的存储空间为 M+2 个字节。也就是说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可以更大一些。</li><li>定点数在 MySQL 内部是以<code>字符串</code>的形式进行存储，这就决定了它一定是精准的。</li><li>当 DECIMAL 类型不指定精度和标度时，其默认为 DECIMAL(10,0)。当数据的精度超出了定点数类型的精度范围时，则 MySQL 同样会进行四舍五入处理。</li></ul><ul><li><strong>浮点数 vs 定点数</strong><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</li></ul></li></ul><h2 id="位类型" tabindex="-1"><a class="header-anchor" href="#位类型" aria-hidden="true">#</a> 位类型</h2><h3 id="_1、类型分类-3" tabindex="-1"><a class="header-anchor" href="#_1、类型分类-3" aria-hidden="true">#</a> 1、类型分类</h3><p>BIT 类型中存储的是二进制值，类似 010110。</p><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1 &lt;= M &lt;= 64</td><td>约为(M + 7)/8 个字节</td></tr></tbody></table><p>BIT 类型，如果没有指定(M)，默认是 1 位。这个 1 位，表示只能存 1 位的二进制值。这里(M)是表示二进制的位数，位数最小值为 1，最大值为 64。</p><h2 id="日期与时间类型" tabindex="-1"><a class="header-anchor" href="#日期与时间类型" aria-hidden="true">#</a> 日期与时间类型</h2><h3 id="_1、分类" tabindex="-1"><a class="header-anchor" href="#_1、分类" aria-hidden="true">#</a> 1、分类</h3><ul><li><code>YEAR</code>类型通常用来表示年</li><li><code>DATE</code>类型通常用来表示年、月、日</li><li><code>TIME</code>类型通常用来表示时、分、秒</li><li><code>DATETIME</code>类型通常用来表示年、月、日、时、分、秒</li><li><code>TIMESTAMP</code>类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY 或 YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-03</td></tr><tr><td>DATETIME</td><td>日期时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>日期时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:00 UTC</td><td>2038-01-19 03:14:07UTC</td></tr></tbody></table><h3 id="_2、year-类型" tabindex="-1"><a class="header-anchor" href="#_2、year-类型" aria-hidden="true">#</a> 2、YEAR 类型</h3><p>YEAR 类型用来表示年份，在所有的日期时间类型中所占用的存储空间最小，只需要<code>1个字节</code>的存储空间。</p><p>在 MySQL 中，YEAR 有以下几种存储格式：</p><ul><li>以 4 位字符串或数字格式表示 YEAR 类型，其格式为 YYYY，最小值为 1901，最大值为 2155。</li><li>以 2 位字符串格式表示 YEAR 类型，最小值为 00，最大值为 99。 <ul><li>当取值为 01 到 69 时，表示 2001 到 2069；</li><li>当取值为 70 到 99 时，表示 1970 到 1999；</li><li>当取值整数的 0 或 00 添加的话，那么是 0000 年；</li><li>当取值是日期/字符串的&#39;0&#39;添加的话，是 2000 年。</li></ul></li></ul><p><strong>从 MySQL5.5.27 开始，2 位格式的 YEAR 已经不推荐使用</strong>。YEAR 默认格式就是“YYYY”，没必要写成 YEAR(4)，从 MySQL 8.0.19 开始，不推荐使用指定显示宽度的 YEAR(4)数据类型。</p><h3 id="_3、date-类型" tabindex="-1"><a class="header-anchor" href="#_3、date-类型" aria-hidden="true">#</a> 3、DATE 类型</h3><p>DATE 类型表示日期，没有时间部分，格式为<code>YYYY-MM-DD</code>，其中，YYYY 表示年份，MM 表示月份，DD 表示日期。需要<code>3个字节</code>的存储空间。在向 DATE 类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD</code>格式或者<code>YYYYMMDD</code>格式表示的字符串日期，其最小取值为 1000-01-01，最大取值为 9999-12-03。YYYYMMDD 格式会被转化为 YYYY-MM-DD 格式。</li><li>以<code>YY-MM-DD</code>格式或者<code>YYMMDD</code>格式表示的字符串日期，此格式中，年份为两位数值或字符串满足 YEAR 类型的格式条件为：当年份取值为 00 到 69 时，会被转化为 2000 到 2069；当年份取值为 70 到 99 时，会被转化为 1970 到 1999。</li><li>使用<code>CURRENT_DATE()</code>或者<code>NOW()</code>函数，会插入当前系统的日期。</li></ul><h3 id="_4、time-类型" tabindex="-1"><a class="header-anchor" href="#_4、time-类型" aria-hidden="true">#</a> 4、TIME 类型</h3><p>TIME 类型用来表示时间，不包含日期部分。在 MySQL 中，需要<code>3个字节</code>的存储空间来存储 TIME 类型的数据，可以使用“HH:MM:SS”格式来表示 TIME 类型，其中，HH 表示小时，MM 表示分钟，SS 表示秒。</p><p>在 MySQL 中，向 TIME 类型的字段插入数据时，也可以使用几种不同的格式。 （1）可以使用带有冒号的字符串，比如&#39;<code>D HH:MM:SS&#39;</code>、&#39;<code>HH:MM:SS</code>&#39;、&#39;<code>HH:MM</code>&#39;、&#39;<code>D HH:MM</code>&#39;、&#39;<code>D HH</code>&#39;或&#39;<code>SS</code>&#39;格式，都能被正确地插入 TIME 类型的字段中。其中 D 表示天，其最小值为 0，最大值为 34。如果使用带有 D 格式的字符串插入 TIME 类型的字段时，D 会被转化为小时，计算格式为 D*24+HH。当使用带有冒号并且不带 D 的字符串表示时间时，表示当天的时间，比如 12:10 表示 12:10:00，而不是 00:12:10。 （2）可以使用不带有冒号的字符串或者数字，格式为&#39;<code>HHMMSS</code>&#39;或者<code>HHMMSS</code>。如果插入一个不合法的字符串或者数字，MySQL 在存储数据时，会将其自动转化为 00:00:00 进行存储。比如 1210，MySQL 会将最右边的两位解析成秒，表示 00:12:10，而不是 12:10:00。 （3）使用<code>CURRENT_TIME()</code>或者<code>NOW()</code>，会插入当前系统的时间。</p><h3 id="_5、datetime-类型-推荐" tabindex="-1"><a class="header-anchor" href="#_5、datetime-类型-推荐" aria-hidden="true">#</a> 5、DATETIME 类型（推荐）</h3><p>DATETIME 类型在所有的日期时间类型中占用的存储空间最大，总共需要<code>8</code>个字节的存储空间。在格式上为 DATE 类型和 TIME 类型的组合，可以表示为<code>YYYY-MM-DD HH:MM:SS</code>，其中 YYYY 表示年份，MM 表示月份，DD 表示日期，HH 表示小时，MM 表示分钟，SS 表示秒。</p><p>在向 DATETIME 类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD HH:MM:SS</code>格式或者<code>YYYYMMDDHHMMSS</code>格式的字符串插入 DATETIME 类型的字段时，最小值为 1000-01-01 00:00:00，最大值为 9999-12-03 23:59:59。 <ul><li>以 YYYYMMDDHHMMSS 格式的数字插入 DATETIME 类型的字段时，会被转化为 YYYY-MM-DD HH:MM:SS 格式。</li></ul></li><li>以<code>YY-MM-DD HH:MM:SS</code>格式或者<code>YYMMDDHHMMSS</code>格式的字符串插入 DATETIME 类型的字段时，两位数的年份规则符合 YEAR 类型的规则，00 到 69 表示 2000 到 2069；70 到 99 表示 1970 到 1999。</li><li>使用函数<code>CURRENT_TIMESTAMP()</code>和<code>NOW()</code>，可以向 DATETIME 类型的字段插入系统的当前日期和时间。</li></ul><h3 id="_6、timestamp-类型" tabindex="-1"><a class="header-anchor" href="#_6、timestamp-类型" aria-hidden="true">#</a> 6、TIMESTAMP 类型</h3><p>TIMESTAMP 类型也可以表示日期时间，其显示格式与 DATETIME 类型相同，都是<code>YYYY-MM-DD HH:MM:SS</code>，需要 4 个字节的存储空间。但是 TIMESTAMP 存储的时间范围比 DATETIME 要小很多，只能存储“1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间。其中，UTC 表示世界统一时间，也叫作世界标准时间。</p><ul><li><strong>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用 TIMESTAMP 存储的同一个时间值，在不同的时区查询时会显示不同的时间。</strong></li></ul><p>向 TIMESTAMP 类型的字段插入数据时，当插入的数据格式满足 YY-MM-DD HH:MM:SS 和 YYMMDDHHMMSS 时，两位数值的年份同样符合 YEAR 类型的规则条件，只不过表示的时间范围要小很多。</p><p>如果向 TIMESTAMP 类型的字段插入的时间超出了 TIMESTAMP 类型的范围，则 MySQL 会抛出错误信息。</p><p><strong>TIMESTAMP 和 DATETIME 的区别：</strong></p><ul><li>TIMESTAMP 存储空间比较小，表示的日期时间范围也比较小</li><li>底层存储方式不同，TIMESTAMP 底层存储的是毫秒值，距离 1970-1-1 0:0:0 0 毫秒的毫秒值。</li><li>两个日期比较大小或日期计算时，TIMESTAMP 更方便、更快。</li><li>TIMESTAMP 和时区有关。TIMESTAMP 会根据用户的时区不同，显示不同的结果。而 DATETIME 则只能反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</li></ul><h2 id="文本类型" tabindex="-1"><a class="header-anchor" href="#文本类型" aria-hidden="true">#</a> 文本类型</h2><h3 id="_1、类型分类-4" tabindex="-1"><a class="header-anchor" href="#_1、类型分类-4" aria-hidden="true">#</a> 1、类型分类</h3><table><thead><tr><th>文本字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>M</td><td>0&lt;= M &lt;= 255</td><td>M 个字节</td></tr><tr><td>VARCHAR(M)</td><td>M</td><td>0&lt;= M &lt;= 65535</td><td>M+1 个字节</td></tr><tr><td>TINTEXT</td><td>L</td><td>0&lt;= L &lt;= 255</td><td>L+2 个字节</td></tr><tr><td>TEXT</td><td>L</td><td>0&lt;= L &lt;= 65535</td><td>L+2 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>L</td><td>0&lt;= L &lt;= 16777215</td><td>L+3 个字节</td></tr><tr><td>LONGTEXT</td><td>L</td><td>0&lt;= L &lt;= 4294967295</td><td>L+4 个字节</td></tr><tr><td>ENUM</td><td>L</td><td>0&lt;= L &lt;= 65535</td><td>1 或 2 个字节</td></tr><tr><td>SET</td><td>L</td><td>0&lt;= L &lt;= 64</td><td>1,2,3,4 或 8 个字节</td></tr></tbody></table><h3 id="_2、char-与-varchar-类型" tabindex="-1"><a class="header-anchor" href="#_2、char-与-varchar-类型" aria-hidden="true">#</a> 2、CHAR 与 VARCHAR 类型</h3><p>CHAR 和 VARCHAR 类型都可以存储比较短的字符串。</p><table><thead><tr><th>字符串(文本)类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>M</td><td>0 &lt;= M &lt;= 255</td><td>M 个字节</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>M</td><td>0 &lt;= M &lt;= 65535</td><td>(实际长度 + 1) 个字节</td></tr></tbody></table><p><strong>CHAR 类型：</strong></p><ul><li>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是 1 个字符。</li><li>如果保存时，数据的实际长度比 CHAR 类型声明的长度小，则会在<code>右侧填充</code>空格以达到指定的长度。当 MySQL 检索 CHAR 类型的数据时，CHAR 类型的字段会去除尾部的空格。</li><li>定义 CHAR 类型字段时，声明的字段长度即为 CHAR 类型字段所占的存储空间的字节数。</li></ul><p><strong>VARCHAR 类型：</strong></p><ul><li>VARCHAR(M) 定义时，<code>必须指定</code>长度 M，否则报错。</li><li>MySQL4.0 版本以下，varchar(20)：指的是 20 字节，如果存放 UTF8 汉字时，只能存 6 个（每个汉字 3 字节） ；MySQL5.0 版本以上，varchar(20)：指的是 20 字符。</li><li>检索 VARCHAR 类型的字段数据时，会保留数据尾部的空格。VARCHAR 类型的字段所占用的存储空间为字符串实际长度加 1 个字节。</li></ul><p><strong>哪些情况使用 CHAR 或 VARCHAR 更好</strong></p><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>适用场景</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>浪费存储空间</td><td>效率高</td><td>存储不大，速度要求高</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非 CHAR 的情况</td></tr></tbody></table><p><code>InnoDB</code>存储引擎，建议使用 VARCHAR 类型。因为对于<code>InnoDB</code>数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且<strong>主要影响性能的因素是数据行使用的存储总量</strong>，由于 char 平均占用的空间多于 varchar，所以除了简短并且固定长度的，其他考虑 varchar。这样节省空间，对磁盘 I/O 和数据存储总量比较好。</p><h3 id="_3、text-类型" tabindex="-1"><a class="header-anchor" href="#_3、text-类型" aria-hidden="true">#</a> 3、TEXT 类型</h3><p>每种 TEXT 类型保存的数据长度和所占用的存储空间不同，如下：</p><table><thead><tr><th>文本字符串类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>小文本、可变长度</td><td>L</td><td>0 &lt;= L &lt;= 255（2^8-1）</td><td>L + 2 个字节</td></tr><tr><td>TEXT</td><td>文本、可变长度</td><td>L</td><td>0 &lt;= L &lt;= 65535（2^16-1）</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>中等文本、可变长度</td><td>L</td><td>0 &lt;= L &lt;= 16777215</td><td>L + 3 个字节</td></tr><tr><td>LONGTEXT</td><td>大文本、可变长度</td><td>L</td><td>0 &lt;= L&lt;= 4294967295（相当于 4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p><strong>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键</strong>。遇到这种情况，你只能采用 CHAR(M)，或者 VARCHAR(M)。</p><p>TEXT 文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用 CHAR，VARCHAR 来代替。还有 TEXT 类型不用加默认值，加了也没用。而且 text 和 blob 类型的数据删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含 TEXT 类型字段，建议单独分出去，单独用一个表。</p><h3 id="_4、enum-类型" tabindex="-1"><a class="header-anchor" href="#_4、enum-类型" aria-hidden="true">#</a> 4、ENUM 类型</h3><p>ENUM 类型也叫作枚举类型，ENUM 类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM 类型只允许从成员中选取单个值，不能一次选取多个值。</p><p>其所需要的存储空间由定义 ENUM 类型时指定的成员个数决定。</p><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>ENUM</td><td>L</td><td>1 &lt;= L &lt;= 65535</td><td>1 或 2 个字节</td></tr></tbody></table><ul><li>当 ENUM 类型包含 1 ～ 255 个成员时，需要 1 个字节的存储空间；</li><li>当 ENUM 类型包含 256 ～ 65535 个成员时，需要 2 个字节的存储空间。</li><li>ENUM 类型的成员个数的上限为 65535 个。</li></ul><p>创建表如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_enum<span class="token punctuation">(</span>
season <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;春&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;夏&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;秋&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;冬&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;unknow&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;春&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;秋&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 忽略大小写</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;UNKNOW&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 允许按照角标的方式获取指定索引位置的枚举值</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># Data truncated for column &#39;season&#39; at row 1</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、set-类型" tabindex="-1"><a class="header-anchor" href="#_5、set-类型" aria-hidden="true">#</a> 5、SET 类型</h3><p>SET 表示一个字符串对象，可以包含 0 个或多个成员，但成员个数的上限为<code>64</code>。设置字段值时，可以取取值范围内的 0 个或多个值。</p><p>当 SET 类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p><table><thead><tr><th>成员个数范围（L 表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1 &lt;= L &lt;= 8</td><td>1 个字节</td></tr><tr><td>9 &lt;= L &lt;= 16</td><td>2 个字节</td></tr><tr><td>17 &lt;= L &lt;= 24</td><td>3 个字节</td></tr><tr><td>25 &lt;= L &lt;= 32</td><td>4 个字节</td></tr><tr><td>33 &lt;= L &lt;= 64</td><td>8 个字节</td></tr></tbody></table><p>SET 类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET 类型在选取成员时，可以一次选择多个成员，这一点与 ENUM 类型不同。</p><p>创建表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_set<span class="token punctuation">(</span>
s <span class="token keyword">SET</span> <span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向表中插入数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;A,B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#插入重复的SET类型成员时，MySQL会自动删除重复的成员</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;A,B,C,A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;A,B,C,D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> test_set<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> temp_mul<span class="token punctuation">(</span>
gender <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
hobby <span class="token keyword">SET</span><span class="token punctuation">(</span><span class="token string">&#39;吃饭&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;睡觉&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;打豆豆&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;写代码&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> temp_mul <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;睡觉,打豆豆&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#成功</span>

<span class="token comment"># Data truncated for column &#39;gender&#39; at row 1</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> temp_mul <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;男,女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;睡觉,写代码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#失败</span>

<span class="token comment"># Data truncated for column &#39;gender&#39; at row 1</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> temp_mul <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;妖&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;睡觉,写代码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#失败</span>


<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> temp_mul <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;睡觉,写代码,吃饭&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、二进制字符串类型" tabindex="-1"><a class="header-anchor" href="#_6、二进制字符串类型" aria-hidden="true">#</a> 6、二进制字符串类型</h3><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M 表示最多能存储的字节数，取值范围是 0~255 个字符。如果未指定(M)，表示只能存储<code>1个字节</code>。例如 BINARY (8)，表示最多能存储 8 个字节，如果字段值不足(M)个字节，将在右边填充&#39;\\0&#39;以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M 表示最多能存储的字节数，总字节数不能超过行的字节长度限制 65535，另外还要考虑额外字节开销，VARBINARY 类型的数据除了存储数据本身外，还需要 1 或 2 个字节来存储数据的字节数。VARBINARY 类型<code>必须指定(M)</code>，否则报错。</p><table><thead><tr><th>二进制字符串类型</th><th>特点</th><th>值的长度</th><th>占用空间</th></tr></thead><tbody><tr><td>BINARY(M)</td><td>固定长度</td><td>M （0 &lt;= M &lt;= 255）</td><td>M 个字节</td></tr><tr><td>VARBINARY(M)</td><td>可变长度</td><td>M（0 &lt;= M &lt;= 65535）</td><td>M+1 个字节</td></tr></tbody></table><h4 id="blob-类型" tabindex="-1"><a class="header-anchor" href="#blob-类型" aria-hidden="true">#</a> BLOB 类型</h4><p>BLOB 是一个<code>二进制大对象</code>，可以容纳可变数量的数据。</p><p>MySQL 中的 BLOB 类型包括 TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB 4 种类型，它们可容纳值的最大长度不同。可以存储一个二进制的大对象，比如<code>图片</code>、<code>音频</code>和<code>视频</code>等。</p><p>需要注意的是，在实际工作中，往往不会在 MySQL 数据库中使用 BLOB 类型存储大对象数据，通常会将图片、音频和视频文件存储到<code>服务器的磁盘上</code>，并将图片、音频和视频的访问路径存储到 MySQL 中。</p><table><thead><tr><th>二进制字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>L</td><td>0 &lt;= L &lt;= 255</td><td>L + 1 个字节</td></tr><tr><td>BLOB</td><td>L</td><td>0 &lt;= L &lt;= 65535（相当于 64KB）</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMBLOB</td><td>L</td><td>0 &lt;= L &lt;= 16777215 （相当于 16MB）</td><td>L + 3 个字节</td></tr><tr><td>LONGBLOB</td><td>L</td><td>0 &lt;= L &lt;= 4294967295（相当于 4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p><strong>TEXT 和 BLOB 的使用注意事项：</strong></p><p>在使用 text 和 blob 字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p><p>① BLOB 和 TEXT 值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值会在数据表中留下很大的&quot;<code>空洞</code>&quot;，以后填入这些&quot;空洞&quot;的记录可能长度不同。为了提高性能，建议定期使用 OPTIMIZE TABLE 功能对这类表进行<code>碎片整理</code>。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了<code>前缀索引</code>。但是仍然要在不必要的时候避免检索大型的 BLOB 或 TEXT 值。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的 WHERE 子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把 BLOB 或 TEXT 列<code>分离到单独的表</code>中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会<code>减少主表中的碎片</code>，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过网络传输大量的 BLOB 或 TEXT 值。</p><h3 id="_7、json-类型" tabindex="-1"><a class="header-anchor" href="#_7、json-类型" aria-hidden="true">#</a> 7、JSON 类型</h3><p>JSON（JavaScript Object Notation）是一种轻量级的<code>数据交换格式</code>。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<strong>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</strong></p><p>在 MySQL 5.7 中，就已经支持 JSON 数据类型。在 MySQL 8.x 版本中，JSON 类型提供了可以进行自动验证的 JSON 文档和优化的存储结构，使得在 MySQL 中存储和读取 JSON 类型的数据更加方便和高效。 创建数据表，表中包含一个 JSON 类型的字段 js 。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_json<span class="token punctuation">(</span>
js json

<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向表中插入 JSON 数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_json <span class="token punctuation">(</span>js<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;{&quot;name&quot;:&quot;张三&quot;, &quot;age&quot;:18, &quot;address&quot;:{&quot;province&quot;:&quot;地址&quot;, &quot;city&quot;:&quot;城市&quot;}}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要检索 JSON 类型的字段中数据的某个具体值时，可以使用“-&gt;”和“-&gt;&gt;”符号。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> js <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;$.name&#39;</span> <span class="token keyword">AS</span> NAME<span class="token punctuation">,</span>js <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;$.age&#39;</span> <span class="token keyword">AS</span> age <span class="token punctuation">,</span>js <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;$.address.province&#39;</span> <span class="token keyword">AS</span> province<span class="token punctuation">,</span> js <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;$.address.city&#39;</span> <span class="token keyword">AS</span> city
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+------+-----------+-----------+</span>
<span class="token operator">|</span> NAME     <span class="token operator">|</span> age  <span class="token operator">|</span> province  <span class="token operator">|</span> city      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+------+-----------+-----------+</span>
<span class="token operator">|</span> <span class="token string">&quot;songhk&quot;</span> <span class="token operator">|</span> <span class="token number">18</span>   <span class="token operator">|</span> <span class="token string">&quot;beijing&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;beijing&quot;</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+------+-----------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过“-&gt;”和“-&gt;&gt;”符号，从 JSON 字段中正确查询出了指定的 JSON 数据的值。</p><h2 id="类型选择总结" tabindex="-1"><a class="header-anchor" href="#类型选择总结" aria-hidden="true">#</a> 类型选择总结</h2><p>在定义数据类型时，如果确定是<code>整数</code>，就用<code> INT</code>； 如果是<code>小数</code>，一定用定点数类型 <code>DECIMAL(M,D)</code>； 如果是日期与时间，就用 <code>DATETIME</code>。</p><ul><li>任何字段如果为非负数，必须是 UNSIGNED</li><li>【<code>强制</code>】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。 <ul><li>说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并分开存储。</li></ul></li><li>【<code>强制</code>】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</li><li>【<code>强制</code>】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li></ul>`,146)])])}const c=n(d,[["render",p],["__file","dataType.html.vue"]]);export{c as default};
