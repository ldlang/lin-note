import{_ as o,r as l,o as c,c as i,e as p,b as s,d as a,a as t}from"./app-70f1c539.js";const r={},u={href:"https://ts.nodejs.cn/docs/handbook/2/mapped-types.html#%E9%80%9A%E8%BF%87-as-%E9%87%8D%E6%96%B0%E6%98%A0%E5%B0%84%E9%94%AE",target:"_blank",rel:"noopener noreferrer"},d={href:"https://ts.nodejs.cn/docs/handbook/2/template-literal-types.html#uppercasestringtype",target:"_blank",rel:"noopener noreferrer"},k={href:"https://ts.nodejs.cn/docs/handbook/2/template-literal-types.html#lowercasestringtype",target:"_blank",rel:"noopener noreferrer"},m={href:"https://ts.nodejs.cn/docs/handbook/2/template-literal-types.html#capitalizestringtype",target:"_blank",rel:"noopener noreferrer"},v={href:"https://ts.nodejs.cn/docs/handbook/2/template-literal-types.html#uncapitalizestringtype",target:"_blank",rel:"noopener noreferrer"};function b(y,n){const e=l("ExternalLinkIcon");return c(),i("div",null,[n[10]||(n[10]=p(`<h1 id="类型操作" tabindex="-1"><a class="header-anchor" href="#类型操作" aria-hidden="true">#</a> 类型操作</h1><h2 id="_1、泛型" tabindex="-1"><a class="header-anchor" href="#_1、泛型" aria-hidden="true">#</a> 1、泛型</h2><p>预定义一个类型，在使用这个类型的时候再传入一个类型指定它。相当于先定义了一个函数，接收的参数就是这个预定义的类型，在使用这个函数的时候传递实参，形参接收到值，预定义的类型也就确定了。传入泛型的时候必须使用<code>&lt;&gt;</code>，尖括号内的就是要传入的类型。</p><p><strong>注意：</strong> 泛型在定义的时候代表的是任何类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义泛型 T</span>
<span class="token keyword">interface</span> <span class="token class-name">Person<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  sex<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 接口Person，并传入 string 给 T 赋值</span>
<span class="token keyword">const</span> obj<span class="token operator">:</span> Person<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  sex<span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用泛型类型变量" tabindex="-1"><a class="header-anchor" href="#使用泛型类型变量" aria-hidden="true">#</a> 使用泛型类型变量</h3><p>原先预定义的泛型参数是可以当作变量来使用的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 此时上面 T 的类型就是代表string，并且这个 T 可以当作类型变量，在函数中随意使用</span>
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类" aria-hidden="true">#</a> 泛型类</h3><p>在<code>class</code>中使用泛型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Point<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  style<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token function">sub</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束" aria-hidden="true">#</a> 泛型约束</h3><p>借助<code>extends </code>来对泛型进行约束，约束后泛型就必须有余数类型的特征。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">myFun</span> <span class="token punctuation">{</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> myFun<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里约束了T必须有length属性</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串有length属性可以传</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数字没有number属性，不能传</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组可以传</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型默认值" tabindex="-1"><a class="header-anchor" href="#泛型默认值" aria-hidden="true">#</a> 泛型默认值</h3><p>一个泛型在定义的时候是可以给默认值的，就像函数一样，如果没有传入类型，那么将使用默认值的类型。</p><p><strong>注意：</strong></p><ul><li>如果一个类型参数有一个默认值，它就被认为是可选的。</li><li>必需的类型参数不能跟在可选的类型参数之后。</li><li>类型参数的默认类型必须满足类型参数的约束（如果存在）。</li><li>指定类型参数时，只需为需要的类型参数指定类型参数即可。 未指定的类型参数将解析为其默认类型。</li><li>如果指定了默认类型并且推断无法选择候选者，则推断默认类型。</li><li>与现有类或接口声明合并的类或接口声明可能会为现有类型参数引入默认值。</li><li>与现有类或接口声明合并的类或接口声明可以引入新的类型参数，只要它指定默认值即可。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// function fun&lt;number&gt;(x: number): number</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// function fun&lt;string&gt;(x: string): string</span>
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、keyof-类型运算符" tabindex="-1"><a class="header-anchor" href="#_2、keyof-类型运算符" aria-hidden="true">#</a> 2、keyof 类型运算符</h2><p>接受一个对象类型作为参数，返回该对象的所有键名(<code>key</code>)字面量组成的联合类型。</p><ol><li><p>取出 interface 定义对象类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">PersonKeys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">;</span>
<span class="token comment">// 等价于：</span>
<span class="token keyword">type</span> <span class="token class-name">PersonKeys</span> <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对 interface 定义类型，并且 key 也制定了类型</p><p>KeyT 是 string | number - 这是因为 JavaScript 对象键总是被强制转换为字符串，所以 obj[0] 总是与 obj[&quot;0&quot;] 相同。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">KeyT</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token comment">// 等价于：</span>
<span class="token keyword">type</span> <span class="token class-name">KeyT</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于 type 定义的对象类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Point<span class="token punctuation">;</span>

<span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 等价于：</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3、typeof-类型运算符" tabindex="-1"><a class="header-anchor" href="#_3、typeof-类型运算符" aria-hidden="true">#</a> 3、typeof 类型运算符</h2><p>可以检测一个表达式，或者函数的类型，用来当类型使用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// let P: string</span>
<span class="token keyword">let</span> <span class="token constant">P</span><span class="token operator">:</span> <span class="token keyword">typeof</span> str <span class="token operator">=</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 或者</span>

<span class="token keyword">const</span> MyArray <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Eve&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// type Person = {</span>
<span class="token comment">//    name: string;</span>
<span class="token comment">//    age: number;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MyArray<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、索引访问类型" tabindex="-1"><a class="header-anchor" href="#_4、索引访问类型" aria-hidden="true">#</a> 4、索引访问类型</h2><p>可以通过类似于对象读取属性的方式，读取对象类型删定义的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// type PersonName = string</span>
<span class="token keyword">type</span> <span class="token class-name">PersonName</span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>索引类型也是一种类型，也可以使用联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// type PersonName = string | number</span>
<span class="token keyword">type</span> <span class="token class-name">PersonName</span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
<span class="token keyword">type</span> <span class="token class-name">PersonKeys</span> <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">PersonName</span> <span class="token operator">=</span> Person<span class="token punctuation">[</span>PersonKeys<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同时获取接口上定义的所有类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// type PersonName = string | number</span>
<span class="token keyword">type</span> <span class="token class-name">PersonName</span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_5、条件类型" tabindex="-1"><a class="header-anchor" href="#_5、条件类型" aria-hidden="true">#</a> 5、条件类型</h2><p>类似于 js 中的三元运算符，只不过最后得到的是一个类型而已。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// type z = number</span>
<span class="token keyword">type</span> <span class="token class-name">z</span> <span class="token operator">=</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token builtin">number</span> <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、映射类型" tabindex="-1"><a class="header-anchor" href="#_6、映射类型" aria-hidden="true">#</a> 6、映射类型</h2><p>如果预先定义了一个对象的类型，一个新的对象类型和原来这个对象类型的所有字段都一致，只不过是是类型不一致，就可以通过类型映射类型快速的转换过去。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 得到所有的key，并将value的值改为 Boolean 类型</span>
<span class="token keyword">type</span> <span class="token class-name">Option<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Property <span class="token keyword">in</span> <span class="token keyword">keyof</span> Type<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Option1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// type convertOptions = {</span>
<span class="token comment">//    fun: boolean;</span>
<span class="token comment">//    add: boolean;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">convertOptions</span> <span class="token operator">=</span> Option<span class="token operator">&lt;</span>Option1<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj<span class="token operator">:</span> convertOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  fun<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  add<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="映射修饰符" tabindex="-1"><a class="header-anchor" href="#映射修饰符" aria-hidden="true">#</a> 映射修饰符</h3><p>通过<code>+</code>或<code>-</code>，对映射过来属性的修饰符进行增加，或者删除，如果不写则默认为<code>+</code>。</p><ol><li><p>删除原有的 readonly 修饰符</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">x</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//</span>
<span class="token keyword">type</span> <span class="token class-name">CreateMutable<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Type<span class="token punctuation">]</span><span class="token operator">:</span> Type<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// type objType = { x: number;  y: number; }</span>
<span class="token keyword">type</span> <span class="token class-name">objType</span> <span class="token operator">=</span> CreateMutable<span class="token operator">&lt;</span>x<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增加对属性的可选修饰符</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">x</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// + 可以省略不写</span>
<span class="token keyword">type</span> <span class="token class-name">CreateMutable<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Type<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> Type<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// type objType = {</span>
<span class="token comment">//    readonly x?: number | undefined;</span>
<span class="token comment">//    readonly y?: number | undefined;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">objType</span> <span class="token operator">=</span> CreateMutable<span class="token operator">&lt;</span>x<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="通过-as-重新映射键" tabindex="-1"><a class="header-anchor" href="#通过-as-重新映射键" aria-hidden="true">#</a> 通过 <code>as</code> 重新映射键</h3>`,39)),s("p",null,[n[1]||(n[1]=a("涉及一些莫名的 ts 方法",-1)),s("a",u,[n[0]||(n[0]=a("直接参考",-1)),t(e)])]),n[11]||(n[11]=p(`<h2 id="_7、-模板字面类型" tabindex="-1"><a class="header-anchor" href="#_7、-模板字面类型" aria-hidden="true">#</a> 7、 模板字面类型</h2><p>字符串字面量类型，如果要统一的更改每个字面量类型时，目标字面类型就很有用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str1</span> <span class="token operator">=</span> <span class="token string">&quot;wer&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// type str2 = &quot;hello_id&quot; | &quot;world_id&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">str2</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_id</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">//或者</span>
<span class="token comment">//type str2 = &quot;hello-wer&quot; | &quot;world-wer&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">str2</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置方法" tabindex="-1"><a class="header-anchor" href="#内置方法" aria-hidden="true">#</a> 内置方法</h3>`,4)),s("ul",null,[s("li",null,[s("a",d,[n[2]||(n[2]=a("Uppercase",-1)),t(e)]),n[3]||(n[3]=a("：将字符串中的每个字符转换为大写版本。",-1))]),s("li",null,[s("a",k,[n[4]||(n[4]=a("Lowercase",-1)),t(e)]),n[5]||(n[5]=a("：将字符串中的每个字符转换为等效的小写字母。",-1))]),s("li",null,[s("a",m,[n[6]||(n[6]=a("Capitalize",-1)),t(e)]),n[7]||(n[7]=a("：将字符串中的第一个字符转换为等效的大写字母。",-1))]),s("li",null,[s("a",v,[n[8]||(n[8]=a("Uncapitalize",-1)),t(e)]),n[9]||(n[9]=a("：将字符串中的第一个字符转换为等效的小写字母。",-1))])])])}const h=o(r,[["render",b],["__file","type-mainpulation.html.vue"]]);export{h as default};
