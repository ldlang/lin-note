import{_ as o,r as c,o as i,c as u,e as a,b as s,d as p,a as e}from"./app-70f1c539.js";const l={},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Event",target:"_blank",rel:"noopener noreferrer"},r={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event",target:"_blank",rel:"noopener noreferrer"};function k(v,n){const t=c("ExternalLinkIcon");return i(),u("div",null,[n[4]||(n[4]=a(`<h1 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h1><h2 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h2><h3 id="事件冒泡" tabindex="-1"><a class="header-anchor" href="#事件冒泡" aria-hidden="true">#</a> 事件冒泡</h3><p>所有的浏览器都支持事件冒泡，如果页面中的 div 有一个 click 事件，那么点击他会先触发他的 click 事件，然后再触发他父级的 click 的事件，直到触发到 document 上。</p><h3 id="事件捕获" tabindex="-1"><a class="header-anchor" href="#事件捕获" aria-hidden="true">#</a> 事件捕获</h3><p>和事件冒泡完全反过来，如果页面中的一个 div 有一个 click 事件，那么点击他，会从 document 上开始查找事件，直到查找到 div 上的这个事件。由于旧版本浏览器不支持，因此实际当中几乎不会 使用事件捕获。通常建议使用事件冒泡，特殊情 况下可以使用事件捕获。</p><h3 id="dom-事件流" tabindex="-1"><a class="header-anchor" href="#dom-事件流" aria-hidden="true">#</a> DOM 事件流</h3><p>DOM2 Events 规范规定事件流分为 3 个阶段：事件捕获、到达目标和事件冒泡。事件捕获最先发生， 为提前拦截事件提供了可能。</p><h2 id="事件处理程序" tabindex="-1"><a class="header-anchor" href="#事件处理程序" aria-hidden="true">#</a> 事件处理程序</h2><p>事件意味着用户或浏览器执行的某种动作。比如，单击（click）、加载（load）、鼠标悬停 （mouseover）。为响应事件而调用的函数被称为事件处理程序（或事件监听器）。事件处理程 序的名字 以&quot;on&quot;开头，因此 click 事件的处理程序叫作 onclick，而 load 事件的处理程序 叫作 onload。有 很多方式可以指定事件处理程序。</p><h3 id="html-事件处理程序" tabindex="-1"><a class="header-anchor" href="#html-事件处理程序" aria-hidden="true">#</a> HTML 事件处理程序</h3><p>直接将一个函数绑定在标签的事件上，其中有一个特殊的参数<code>event</code>，包含了节点的一些信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div onclick<span class="token operator">=</span><span class="token string">&quot;divClick(event)&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">divClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我被点击了&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//元素节点信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom0-事件处理程序" tabindex="-1"><a class="header-anchor" href="#dom0-事件处理程序" aria-hidden="true">#</a> DOM0 事件处理程序</h3><p>在元素节点的事件上绑定一个函数，如果这个事件触发，那么就会触发这个函数，如果这个函数是 一个普通函数，那么函数里面的<code>this</code>就是指向这个节点，这个<code>this</code>等同于通过 getElementById 拿到的节点，函数有一个默认的形参，上面存储了这个节点的信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;mydiv&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myDiv<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span> <span class="token operator">===</span> myDiv<span class="token punctuation">;</span> <span class="token comment">// true</span>
  myDiv<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 移除事件</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom2-事件处理程序" tabindex="-1"><a class="header-anchor" href="#dom2-事件处理程序" aria-hidden="true">#</a> DOM2 事件处理程序</h3><p><code>addEventListener</code> 添加事件监听<code>removeEventListener</code> 移除事件监听，接收三个参数，事件名， 事件处理函数和布尔值（或者是一个配置对象），最后一个参数 true 表示在捕获阶段调用事件处理程序， false（默认值）表示在冒泡阶段调用事 件处理程序。同一个 dom 节点可以被多个事件监听，这有利于 对不同事件进行不同的处理。</p><p>**注意：**移除事件监听必须和监听的事件是同一个事件处理函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;触发了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
myDiv<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myDiv<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置对象说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>capture</td><td>一个布尔值，表示 <code>listener</code> 会在该类型的事件捕获阶段传播到该 <code>EventTarget</code> 时触发。</td></tr><tr><td>once</td><td>一个布尔值，表示 <code>listener</code> 在添加之后最多只调用一次。如果为 <code>true</code>，<code>listener</code> 会在其被调用之后自动移除。</td></tr><tr><td>passive</td><td>一个布尔值，设置为 <code>true</code> 时，表示 <code>listener</code> 永远不会调用 <code>preventDefault()</code>。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。查看使用 passive 改善滚屏性能以了解更多。</td></tr><tr><td>siganl</td><td>AbortSignal，该 <code>AbortSignal</code> 的 abort()方法被调用时，监听器会被移除</td></tr></tbody></table><h2 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h2><p>所有的 DOM 事件调用的函数，都会默认接收到一个形参<code>event</code>对象，这个对象包含了一些信息， 比如导致事件的元素、发生的事件类型，以及可能与特定事件相关的任何其他数据。</p><h3 id="dom-事件对象" tabindex="-1"><a class="header-anchor" href="#dom-事件对象" aria-hidden="true">#</a> DOM 事件对象</h3><p>所有的 DOM 处理事件中，接受到的 event 都是一样的，并且在事件处理的普通函数中， <code>event.currentTarget</code> === <code>event.target</code> === <code>this</code> === <code>dom节点</code>， event.type 就可以判断触发事件的类型，比如触发的是 click 事件，那么 event.type 的值就是 click</p>`,26)),s("p",null,[s("a",d,[n[0]||(n[0]=p("event 实例属性说明",-1)),e(t)])]),n[5]||(n[5]=a(`<p><strong>注意</strong> event 对象只在事件处理程序执行期间存在，一旦执行完毕，就会被销毁。</p><ul><li><p><strong>preventDefault</strong></p><p>阻止默认行为，比如，链接的默认行为就是在被单击时导 航到 href 属性指定的 URL。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 此时再次点击a标签，就不会发生跳转了</span>
<span class="token keyword">const</span> adom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
adom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>stopPropagation</strong></p><p>阻止事件冒泡方式事件向外传播。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>adom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h2><p>用户界面事件（UIEvent）：涉及与 BOM 交互的通用浏览器事件。</p><p>焦点事件（FocusEvent）：在元素获得和失去焦点时触发。</p><p>鼠标事件（MouseEvent）：使用鼠标在页面上执行某些操作时触发。</p><p>滚轮事件（WheelEvent）：使用鼠标滚轮（或类似设备）时触发。</p><p>输入事件（InputEvent）：向文档中输入文本时触发。</p><p>键盘事件（KeyboardEvent）：使用键盘在页面上执行某些操作时触发。</p><p>合成事件（CompositionEvent）：在使用某种 IME（Input Method Editor，输入法编辑器）输入</p><p>字符时触发。</p><h3 id="用户界面事件" tabindex="-1"><a class="header-anchor" href="#用户界面事件" aria-hidden="true">#</a> 用户界面事件</h3><ol><li><p><strong>load</strong>事件</p><ul><li><p>在 window 上添加对<code>load</code>事件的监听，这个监听事件则会在整个页面加载完毕后触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;页面加载完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 img 上添加<code>load</code>事件，则会在整张图片都渲染完毕后触发事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;图片加载完成了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据 DOM2 Events，load 事件应该在 document 而非 window 上触发。可是为了</p><p>向后兼容，所有浏览器都在 window 上实现了 load 事件，</p><p>但是通过获取 dom 添加事件测试并未生效，只能在节点上加事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 有效</span>
<span class="token operator">&lt;</span>body onload<span class="token operator">=</span><span class="token string">&quot;console.log(&#39;加载完毕了&#39;)&quot;</span><span class="token operator">&gt;</span>

<span class="token comment">// 并未生效</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;页面加载完毕&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>unLoad</strong>事件</p><p>监听页面卸载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unload&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>resize</strong>事件</p><p>监听浏览器窗口尺寸变化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;尺寸变化了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>scroll</strong>事件</p><p>监听页面滚动，或者一个盒子上有<code>overflow</code>，也可以对这个盒子添加<code>scroll</code>事件的监听</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;scroll&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;页面滚动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="焦点事件" tabindex="-1"><a class="header-anchor" href="#焦点事件" aria-hidden="true">#</a> 焦点事件</h3><ul><li>blur 失去焦点，不会冒泡</li><li>focusout 失去焦点，会向外冒泡</li><li>focus 获取焦点，不会冒泡</li><li>focusin 获取焦点，会向外冒泡</li></ul><h3 id="鼠标和滚轮事件" tabindex="-1"><a class="header-anchor" href="#鼠标和滚轮事件" aria-hidden="true">#</a> 鼠标和滚轮事件</h3>`,16)),s("ul",null,[n[2]||(n[2]=s("li",null,"click 在用户单击鼠标主键（通常是左键）或按键盘回车键时触发",-1)),n[3]||(n[3]=s("li",null,"dblclick 在用户双击鼠标主键（通常是左键）时触发",-1)),s("li",null,[s("a",r,[n[1]||(n[1]=p("mdn 事件说明",-1)),e(t)])])]),n[6]||(n[6]=a(`<ol><li><p>客户端坐标</p><p>鼠标事件发生时，鼠标的位置会被保存在 clientX 和 clientY 上，这两个属性表示的是该点距离当前浏览器可视窗口的顶部，和左边的距离。如果页面滑动这两个值距离可视窗口的大小也会改变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> clientX<span class="token punctuation">,</span> clientY <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientX<span class="token punctuation">,</span> clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>页面坐标</p><p>页面坐标是，该点距离页面顶部（pageY）和页面左边（pageX）的距离，页面无论怎么动，这两个值都不会改变的。如果页面不产生滚动，那么 页面坐标 = 客户端坐标</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pageX<span class="token punctuation">,</span> pageY <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pageX<span class="token punctuation">,</span> pageY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>屏幕坐标</p><p>是距离屏幕左边（screenX）和顶部的距离（screenY）,和浏览器的位置就无关了，永远都是基于屏幕的位置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> screenX<span class="token punctuation">,</span> screenY <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>screenX<span class="token punctuation">,</span> screenY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修饰键</p><p>修饰键 Shift、Ctrl、Alt 和 Meta，分别对应 event 的 shiftKey、ctrlKey、altKey 和 metaKey， 比如在 windonw 上多选的时候会按住 Ctrl 键，然后使用鼠标左键进行多选。event 上的修饰键也是同样的，比如按住了 Ctrl 键，那么在用鼠标左键点击的时候，<code>event.ctrlKey</code>就会返回 true，否则返回 false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> shiftKey <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shiftKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按着键盘的shift点击鼠标左键则返回true，否则为false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>相关元素</p><p><code>relatedTarget</code>，只有监听在 muoseover 和 mouseout 事件时，event 身上才会有这个属性，如果监听的是 muoseout，那么这个属性得到的是从当前节点移出后，遇到第一个节点的信息，如果是 muoseover，那么得到的节点信息是，从那个节点移入到当前节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseout&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> relatedTarget <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>relatedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从当前节点移出后遇到的第一个节点的节点信息</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>鼠标按键</p><p>在 event 上有一个<code>button</code>属性，通常情况下 0 表示鼠标主键（左键）、1 表示鼠标中键（通常 也是滚轮键）、2 表示鼠标副键。</p></li><li><p>额外事件信息</p><p>在 event 上的<code>detail</code>属性，如果鼠标在当前节点上没有移动，并且快速单击鼠标左键，那么 detail 的值就会累加，统计你点击了多少次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> detail <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标不动，且不停的单击，detail的值就会累加</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>mousewheel 事件</p><p>监听 mousewheel 事件时，event 上会有一个<code>wheelDelta</code>的属性，鼠标滚轮往上滚的时得到的是一个 120 的值，往下滚得到的是 -120 的值，所以只需要判断正负就可以了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousewheel&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> wheelDelta <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往上滚为120，往下滚为-120</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="键盘与输入事件" tabindex="-1"><a class="header-anchor" href="#键盘与输入事件" aria-hidden="true">#</a> 键盘与输入事件</h3><ul><li>keydown 用户按下键盘的摸个键时触发，如果按住不放就会连续触发</li><li>textInput 当用户编辑的文本，被输入到输入框的时候触发</li><li>keyup 用户释放键盘上的某个键时。</li></ul><p>键盘事件也支持修饰键，shiftKey、ctrlKey、altKey 和 metaKey。比如可以判断用户是否同时按下了 ctrl + c 进行复制。</p><p>阻止用户使用 ctrl + c 复制网页的内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;keydown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> ctrlKey<span class="token punctuation">,</span> code<span class="token punctuation">,</span> keyCode <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">===</span> <span class="token number">67</span> <span class="token operator">&amp;&amp;</span> ctrlKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;用户同时按下了ctrl + c 进行了复制,并且被阻止了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>键码</p><p>键盘上的每个键都有自己<code>keyCode</code>，从 event 上获取每个键的<code>keyCode</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;keydown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> keyCode <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;keyCode&quot;</span><span class="token punctuation">,</span> keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>textInput</strong>事件</p><p>作 为对 keypress 的替代，textInput 事件的行为有些不一样。一个区别是 keypress 会在任何可以获 得焦点的元素上触发，而 textInput 只在可编辑区域上触发。另一个区别是 textInput 只在有新字 符被插入时才会触发，而 keypress 对任何可能影响文本的键都会触发（包括退格键）。</p></li></ol><h3 id="合成事件" tabindex="-1"><a class="header-anchor" href="#合成事件" aria-hidden="true">#</a> 合成事件</h3><ul><li><p>在 compositionstart 事件中，包含正在编辑的文本（例如，已经选择了文本但还没替换）；</p></li><li><p>在 compositionupdate 事件中，包含要插入的新字符（正在输入）；</p></li><li><p>在 compositionend 事件中，包含本次合成过程中输入的全部内容（输入完成）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;compositionstart&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;开始输入&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;compositionupdate&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;正在输入&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;compositionend&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;结束输入&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="html5-事件-有兼容性问题-谨慎使用" tabindex="-1"><a class="header-anchor" href="#html5-事件-有兼容性问题-谨慎使用" aria-hidden="true">#</a> HTML5 事件 （有兼容性问题，谨慎使用）</h3><ol><li><p><strong>contextmenu</strong> 事件</p><p>监听鼠标右键的点击</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;contextmenu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;右键被点击了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>beforeunload</strong> 事件</p><p>如果当前这个窗口要打开一个新的网页，则会触发这个事件，并且弹出一个 confirm 的选择框</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;beforeunload&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>DOMContentLoaded</strong> 事件</p><p><code>load</code>事件时页面完全加载完毕（包括图片，css 等），而<code>DOMContentLoaded</code>则会在 dom 数构建完毕就触发，而不会等外部的资源加载完毕。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;dom树已经加载完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>hashchange</strong> 事件</p><p>监听路由中<code>#</code>后面值的变化，得到的是完整的路径，event 对象中会新增两个值，分别是 oldURL 和 newURL</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;hashchange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>oldURL<span class="token punctuation">,</span> event<span class="token punctuation">.</span>newURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到#后面的内容，包括#号</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="内存与性能" tabindex="-1"><a class="header-anchor" href="#内存与性能" aria-hidden="true">#</a> 内存与性能</h2><h3 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托" aria-hidden="true">#</a> 事件委托</h3><p>通过个父级添加事件，利用事件的冒泡，给子级对应事件添加处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ulDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#ulDom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ulDom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>
    <span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span> <span class="token comment">// 通过判断子级的文本来确定点击的子级</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;你点击了1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;你点击了2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;你点击了其他&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除事件处理程序" tabindex="-1"><a class="header-anchor" href="#删除事件处理程序" aria-hidden="true">#</a> 删除事件处理程序</h3><p>如何一个节点不是被<code>removeChild</code>或者<code>repalceChild</code>删除的，那么节点上注册的事件就不会在内存中被删除，依然会贮存在内存中，最好的方式就是如果这个节点不是被上面两个方式移除的，那么将他注册的事件一并移除。事件委托也能很好的解决这个问题。</p>`,17))])}const g=o(l,[["render",k],["__file","event.html.vue"]]);export{g as default};
