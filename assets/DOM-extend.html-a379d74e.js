import{_ as s,o as a,c as t,e}from"./app-70f1c539.js";const o={};function p(c,n){return a(),t("div",null,[...n[0]||(n[0]=[e(`<h1 id="dom-扩展" tabindex="-1"><a class="header-anchor" href="#dom-扩展" aria-hidden="true">#</a> Dom 扩展</h1><h2 id="selectors-api" tabindex="-1"><a class="header-anchor" href="#selectors-api" aria-hidden="true">#</a> Selectors API</h2><ol><li><p><strong>querySelector</strong></p><p>获取匹配条件的第一个 dom 节点，主要是通过 class 名，获取的是快照，获取的这个节点在其 他地方被更改，并不会实时检测到，但是对这个获取到的节点进行操作依然是有效的。</p><ul><li><p>通过标签名获取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取页面上第一个div标签的dom</span>
<span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 id 获取标签</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取页面上第一个 id 为 myDiv 的dom</span>
<span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#myDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 class 的名获取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取页面上第一个有 bd 这个class的dom</span>
<span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.bd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取指定标签下，指定的 class 的标签</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取页面上第一个 div标签有 bd 这个class的标签</span>
<span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;div.bd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>querySelectorAll</strong></p></li></ol><p>等同于 querySelector，只不过得到是所有符合条件的节点数组快照，没有实时获取是因为如果同时获取并更改大量的 dom，会有性能上的问题。</p><h2 id="html5" tabindex="-1"><a class="header-anchor" href="#html5" aria-hidden="true">#</a> html5</h2><h3 id="css-类扩展" tabindex="-1"><a class="header-anchor" href="#css-类扩展" aria-hidden="true">#</a> css 类扩展</h3><ol><li><p><strong>getElementsByClassName</strong></p><p>通过 class 获取 dom，返回所有匹配的节点数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 得到所有class上有 aa 属性的节点</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="焦点管理" tabindex="-1"><a class="header-anchor" href="#焦点管理" aria-hidden="true">#</a> 焦点管理</h3><ol><li><p><strong>activeElement</strong></p><p>获取当前页面中有焦点的dom</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn&quot;</span><span class="token operator">&gt;</span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>
dom<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> active <span class="token operator">=</span> document<span class="token punctuation">.</span>activeElement
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom <span class="token operator">==</span> active<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>hasFocus</strong></p><p>查询当前页面是否有获取焦点的dom，返回布尔值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isHas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">hasFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="htmldocment-扩展" tabindex="-1"><a class="header-anchor" href="#htmldocment-扩展" aria-hidden="true">#</a> HTMLDocment 扩展</h3><ol><li><p><strong>readyState</strong></p><p>有两个值，<code>loading</code>和<code>complete</code>，<code>loading</code>表示文档正在加载，<code>complete</code>表示文档已经加载完成了，但是readyState只是一个静态的值，只能获取一次结果，并不会随着文件加载的变化而变化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>只会判断在这段代码执行的这一时刻，文档有无加载完成，并不会实时的监听。
<span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">&#39;complete&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;页面加载完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：实时的监听文档加载完成只能通过事件监听去处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;页面加载完成&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>compatMode</strong></p><p>判断一个页面是以标准还是混杂模式渲染，值是<code>CSS1Compat</code>为标准模式，<code>BackCompat</code>为混杂模式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>compatMode
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CSS1Compat 标准模式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BackCompat 混杂模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>head</strong></p><p>直接获取<code>head</code>的dom</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span>head
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="字符集属性" tabindex="-1"><a class="header-anchor" href="#字符集属性" aria-hidden="true">#</a> 字符集属性</h3><ol><li><p><strong>characterSet</strong></p><p>获取和设置当前文档的字符集</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>获取
<span class="token keyword">const</span> char <span class="token operator">=</span> document<span class="token punctuation">.</span>characterSet
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// UTF-8</span>

设置
document<span class="token punctuation">.</span>characterSet <span class="token operator">=</span> <span class="token string">&#39;utf-16&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="自定义属性" tabindex="-1"><a class="header-anchor" href="#自定义属性" aria-hidden="true">#</a> 自定义属性</h3><p>给标签设置自定义属性，要以<code>data-</code>开头，这样浏览器就知道这属性时不渲染的，同时也能通过<code>dataset</code>访问其属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;mydiv&quot;</span> data<span class="token operator">-</span>appid<span class="token operator">=</span><span class="token string">&quot;123&quot;</span> data<span class="token operator">-</span>my<span class="token operator">=</span><span class="token string">&quot;my&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span>
dom<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>appid <span class="token comment">// 123</span>
dom<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>my <span class="token comment">// my</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入标记" tabindex="-1"><a class="header-anchor" href="#插入标记" aria-hidden="true">#</a> 插入标记</h3><ol><li><p><strong>innerHTML</strong></p><p>获取当前节点下的所有子节点的字符串，或者给当前节点插入一段真实的dom节点</p><ul><li><p>获取，得到了myDiv下面的所有子节点，包括缩进格式，但是并不能操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置，可以插入任意数量和深度的节点，这些插入的节点也能被操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span>
dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;span&gt;innerHTML&lt;/span&gt;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>outerHTML</strong></p><p>获取当前节点及当前节点下所有的子节点，或者将当前节点及其子节点全部替换为一段节点，除了得到的节点包含自身之外，表现和<code>innerHTMl</code>一致。</p></li><li><p><strong>innerText</strong></p><p>给当前节点插入一段文本内容</p></li><li><p><strong>outerText</strong></p><p>将当前节点替换为一段文本内容</p></li><li><p><strong>insertAdjacentHTML()</strong></p></li></ol><p>接收两个参数，第一个是插入的位置，是插入的节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span>
dom<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;afterend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;strong&gt;&quot;</span> <span class="token operator">+</span> <span class="token string">&#39;strong&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/strong&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个参数配置</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>beforebegin</td><td>插入当前元素前面，作为前一个同胞节点</td></tr><tr><td>afterbegin</td><td>插入当前元素内部，作为新的子节点或放在第一个子节点前面</td></tr><tr><td>beforeend</td><td>插入当前元素内部，作为新的子节点或放在最后一个子节点后面</td></tr><tr><td>afterend</td><td>插入当前元素后面，作为下一个同胞节点</td></tr></tbody></table><ol start="6"><li><p><strong>insertAdjacentText()</strong></p><p>插入文本内容，参数和表现与<code>insertAdjacentHTML</code>一致</p></li><li><p><strong>scrollIntoView()</strong></p><p>将节点滚动到指定的位置，接收两种参数，第一种是boolean，第二种的配置对象</p><ul><li><p>Boolean，<code>true</code>让节点顶部滚动到页面顶部，<code>false</code>将节点底部滚动至页面底部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
dom<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
dom<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&#39;smooth&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">&#39;center&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>behavior</td><td>smooth（平滑滚动）、auto（瞬间滚动）</td><td>定义过渡动画，可选</td></tr><tr><td>block</td><td>start、center、end、nearest（默认值）</td><td>定义垂直方向的对齐，可选</td></tr><tr><td>inline</td><td>start、center、end、nearest（默认值）</td><td>定义水平方向的对齐，可选</td></tr></tbody></table></li></ul></li></ol>`,23)])])}const l=s(o,[["render",p],["__file","DOM-extend.html.vue"]]);export{l as default};
