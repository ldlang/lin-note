import{_ as a,o as s,c as e,e as t}from"./app-70f1c539.js";const c={};function p(o,n){return s(),e("div",null,[...n[0]||(n[0]=[t(`<h1 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h1><h2 id="_1、scanner-对象" tabindex="-1"><a class="header-anchor" href="#_1、scanner-对象" aria-hidden="true">#</a> 1、Scanner 对象</h2><p>用来获取用户输入的对象。</p><ol><li><p>基本语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取输入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> sca <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是next的输出：&quot;</span> <span class="token operator">+</span> sca<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 常用</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是nextLine的输出：&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>next 和 nextLine 的区别，next 只能获取空格之前的字符，也就是说 next 的输入遇到空格就会被结束，而 nextLine 只有遇到回车才会结束，所以能接受空格</p></blockquote></li><li><p>输入检查</p><p><code>hasNext()</code> 用于检查 <code>Scanner</code> 对象是否还有下一个输入项可以读取，返回一个布尔值；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> sca <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是next的输出：&quot;</span> <span class="token operator">+</span> sca<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其余的 next</p><p><code>Scanner</code>上除了有上面的 4 个方法，还有<code>nextFloat</code>、<code>hasNextFloat</code>、<code>nextInt</code>、<code>hasNextInt</code>等的各种类型的方法，<code>has</code>的方法用于判断得到是不是对应类型的值，<code>next</code>的方法则是用于获取输入的值；</p></li><li><p>关闭<code>Scanner</code></p><p>每次调用完<code>Scanner</code>都要进行关闭</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="以下的内容和-js-一样-待续补充" tabindex="-1"><a class="header-anchor" href="#以下的内容和-js-一样-待续补充" aria-hidden="true">#</a> 以下的内容和 js 一样，待续补充</h2><h2 id="_2、if" tabindex="-1"><a class="header-anchor" href="#_2、if" aria-hidden="true">#</a> 2、if</h2><h2 id="_3、switch" tabindex="-1"><a class="header-anchor" href="#_3、switch" aria-hidden="true">#</a> 3、switch</h2><h2 id="_4、while" tabindex="-1"><a class="header-anchor" href="#_4、while" aria-hidden="true">#</a> 4、while</h2><h2 id="_5、do-while" tabindex="-1"><a class="header-anchor" href="#_5、do-while" aria-hidden="true">#</a> 5、do...while</h2><h2 id="_6、for" tabindex="-1"><a class="header-anchor" href="#_6、for" aria-hidden="true">#</a> 6、for</h2>`,10)])])}const l=a(c,[["render",p],["__file","process-control.html.vue"]]);export{l as default};
